[Support Guide] Testing your Netlify builds

support-guide

testing-with-netlify

fool

Jun 2019

Last updated by Netlify Support: October 2024

Running tests as a part of continuous deployment processes is a fantastic way to ensure that your code
is indeed production ready and not prone to errors you can anticipate. Fortunately, Netlify’s build system
and Deploy Previews can help make testing your application easier!

I think most testing can ﬁt into three categories:

unit testing - most important during a cycle of active development, but can also be run at build time.
This is more often than not a run-your-code-and-look-at-results test, rather than a browser test. Did
you know that you can run shell scripts and other multi-process pipelines in our build

environment ? The pattern for aborting the build if a test fails in this case is to make sure your build
command exits with a non-0 shell command status in case any important test fails. We’d be
happy to advise you on this in case you’re not a Unix whiz - it’s not super intuitive.

integration testing - making sure that all the pieces work together well. This could be a pass/fail

test of some functionality via internal methods, or a browser-based test using a headless
browser . In both cases, you would still want to not publish the build if the tests fail, so the same
pattern as above around ensuring that your test process returns the correct status to the parent shell
is crucial in us NOT publishing a build your code could identify as being broken!

acceptance or end-to-end testing - making sure the site works once published. This is impossible
to test during build - you can’t point a browser at a real webpage served on our CDN before it is built
and deployed. Here’s where you should be leveraging Deploy Previews! When you think your
feature branch is ready to ship, you create a Pull Request to your production branch with the code
change. That might lead to problems that your unit or integration testing didn’t see, and so you might
want to point a tool like Browserstack or some other browser-based testing at your site to “really”
test. This will let you test redirects, proxying, SSL, or even visual indicators that would be hard to
see in headless chrome. This is also a good time to get your stakeholders to review the work - user
acceptance testing - BEFORE merging the PR.

So, at a high level, you have a plan - but how will you implement it? Here’s some speciﬁc example
implementations:

Unit Testing : you could use an npm package like the ones described here, and chain your tests with
your build using a build command like:

npm run test && npm run build

Skip to main content

When you use this pattern, the build command may be poised to succeed, but as long as the test process
returns a non-0 (unsuccessful) exit code to the parent shell, we’ll mark the build as failed before we even
try to build. You’ll want to make sure your test tool logs some details when it does this so you can examine
the build logs and understand the test(s) that failed!

Integration testing:

If you’re using a headless browser, try this approach:

Build your code normally, running unit tests ﬁrst. If the unit tests pass & the build process is
successful…
Then ﬁre up a server process in our build environment IN THE BACKGROUND so you can run other
processes while it is running. This is the ONLY time we’ll advise you to run a server during build!
Note that you’ll have to run your server on a non-privileged port (numbered > 1024) since you do
not have root access in the container to use a privileged port below 1024 (such as 80 or 443)
Make sure your build uses very little memory . This will probably be the hardest part, but chrome
may very well not run within the build container depending on what else is happening on that host.
(For reference, your builds happen in a docker container which has at minimum 1 cpu and 1.5GB
memory). A good way to do this might be to do it OUTSIDE of yarn/gatsby (so those aren’t “in
memory” still while you try to load chrome) - with a build command like this perhaps: gatsby build &&
./run_my_test

You’ll need to clean up the server process after testing - if you leave it running, your build will stall
and fail.
We recommend you conﬁgure and test this using these instructions in our docs to simulate our
build environment, for a quicker check/ﬁx cycle (you can even run repeatedly within the same
container, without needing to trigger a new build, as you debug.)

Acceptance testing:

1. build but do not publish your deploy. You can use our Locked Deploys feature to accomplish

this, and of course Deploy Previews are NEVER automatically published at your production URL 2. use that deploy preview’s speciﬁc URL to do your testing from an external service. In case

you weren’t aware, EVERY deploy has a permalink in the form https://HASH--
sitename.netlify.com that you’ll see in your deploy notiﬁcations or you can get from the API or

your deploys listing by clicking

Permalink as shown in the below screenshot.

3. then you could use the API to publish a deploy whose tests have passed. This will remove

most/all of the potential problems I’m going to mention below

Skip to main content

This article from one of Netlify’s developers goes into extreme detail around Synthetic Performance
testing methodologies and processes which could also ﬁt here!

Pro Tips for unit and integration testing:

1. If you have a public repository you can make your build logs visible to anyone even if they are not

part of your Netlify team.

2. You can have our notiﬁcations using GitHub checks or similar functionality for GitLab post links to

the failed deploy logs right in your PR’s comments.

3. You’ll have to install your tools - we don’t have rspec or middleman installed by default. See this

article on conﬁguring builds for more information on creating that conﬁguration in a way that our
CI uses it.

Finally, there is a new pattern in town that may be relevant to you AND save you some work! With the
launch of Netlify’s build plugins, folks have automated some common tasks you might like to run with
any deploy such as verifying links or monitoring site performance. One of the most innovative
contributed plugins is from Applitools. Their plugin does “visual” testing: Automatically Run Visual
Tests on Every Netlify Deploy

Let us know how your testing goes, or whether you have other ideas or approaches!

JavaScript: Run Test Suite before building

Testing Lambda Functions

Unit Testing Netlify Functions

Integrating Netlify with other apps (Google, Github, AWS, CircleCI, etc) or building automations …

Starting a Gitlab pipeline after a successful Netlify deployment

4 more

Related topics

Skip to main content

Topic

Replies

Views

Activity

JavaScript: Run Test Suite before building

deployment

building

netlify-newbie

Unit Testing Netlify Functions

lambda-functions

[Support Guide] Compiled Build and Deploy Resources – start

here!

deployment

building

support-guide

Deploying a phoenix app on netlify

deployment

Build and Deploy netlify with github actions

deployment

building

github-actions

3

4

8

1

1

5.1k

Oct 2019

2.7k

May 2021

14.5k

Oct 2023

2.8k

Mar 2020

1.8k

Mar 2023

[Support Guide] What can Netlify’s staff help debug about

my failing builds or deploys?

building

support-guide

fool

Jul 2021

Last Reviewed by Netlify Support Staff: November 2024

Our team loves to help!

We want you to succeed in your use of Netlify, and particularly, we want to help you understand why your
site which builds on your local machine will not build within Netlify’s build environment.

We have a ton of related content, so if you are trying to debug your build failing, you’ll want to start from
one of these articles:

The best “starting place” for debugging build issues is making sure you’ve got things working locally
FIRST then have your environment synced with ours so we build “the same way” you do: [Support
Guide] Debugging Netlify site builds
This contains advice around common pitfalls and errors, good next reading: [Support Guide]
Frequently encountered problems during builds
This is the best “build performance” guide we have:

[Support Guide] Build Performance Pro-tips
The above guide pairs nicely with this guide outlining the resources available in the build system:
[Support Guide] Making sure your builds use appropriate resources for Netlify's build system

But, at some point, if you’ve tried it all (we think it would take someone who is pretty good at unix and

building several hours to try it all, just to set expectations on the effort level that our guides should enable
you to self-serve at), and your build still won’t work please feel free to ask for help!

You should include the following information when you ask your question:

A description of all the things you’ve tried, so we don’t have to guess if you’ve synced our build
environment with your local versions, or if your build works locally, or what you’ve changed in
your code recently.
Your site name or the URL to your site.

What you are trying to accomplish.

Sometimes we can’t help as quickly or as in depth as you’d like. For context, we have small team of
hardworking Support Engineers. We take care of hundreds of thousands of customers with millions of
deploys with a team of less than 10 people. Those 10 people assist customers from Enterprise, who pay

for dedicated support, all the way down to the Starter tier, who use our services for free. Even though we
hate being stuck as much as you do, we can’t offer beyond the following:
Skip to main content

Debugging or accessing your site’s javascript, whether it be vanilla JS or a framework. We can give
it a quick look, but we do not have the resources to review the problems to your personal JS most of
the time.
If you’re having trouble with other systems such as CircleCI or TravisCI, we will not be able to
provide direct tech support on other products.
Network connections from the build environment to services or APIs we do not control are not things
we can troubleshoot with you.

Hopefully this helps clarify how and what we can help with. Please open a thread to get started!

[Support Guide] Compiled Build and Deploy Resources -- start here!

Automatically bumped on Sep 9, 2021

Automatically bumped on Oct 29, 2021

Automatically bumped on Dec 18, 2021

Automatically bumped on Feb 11, 2022

Automatically bumped on Apr 9, 2022

Automatically bumped on Jun 11, 2022

Automatically bumped on Aug 14, 2022

Automatically bumped on Oct 18, 2022

Automatically bumped on Dec 24, 2022

Automatically bumped on Mar 2, 2023

Automatically bumped on May 7, 2023

Automatically bumped on Jul 13, 2023

Automatically bumped on Sep 19, 2023

Skip to main content

Automatically bumped on Nov 22, 2023

Automatically bumped on Jan 15, 2024

Automatically bumped on Mar 8, 2024

Automatically bumped on May 10, 2024

Automatically bumped on Jul 11, 2024

closed on Aug 22, 2024. Create a new topic for help! :)

[Support Guide] Deploying a site to Netlify - different

approaches

deployment

support-guide

laura

Senior Manager, Support Engineering

Mar 2019

Last Reviewed By Netlify Support Staff: April 2024

So you are ready to put your work live? Great! Here are 3 ways to deploy a site on Netlify:

1. Drag and drop. This is the simplest & quickest deployment method. There is a "drop zone" at

https://app.netlify.com/account/sites/ (once you have logged in). You can drop a folder or zip ﬁle
in the speciﬁed box at the bottom of the page. Then to update your site, just go to your Deploys

page for that site and drag and drop right there.

2. Command Line Interface (CLI). This is often the easiest way to integrate with 3rd-party

Continuous Integration tools, and it doesn’t even require using the Netlify User Interface.
Everything is done from your terminal’s command line. All you need is the directory with your

ﬁles on your machine . To set up the CLI follow these brief instructions.

3. Git-backed continuous deployment. This is the best workﬂow for people using git-backed

repositories . If you already have your site in a repo you can deploy immediately upon commit,

automatically! Below is what you’ll see at Netlify App, so just make your choice of the four providers
we support and we walk you through set up from there.

Is there a way to deploy static sites to Netlify without Git from my android phone?

What is and what is not netlify?

[Support Guide] Compiled Build and Deploy Resources -- start here!

Netlify large media on docker image

NXDOMAIN after conﬁguring Netlify nameservers

Skip to main content

DavidWells Netlify Alumni

Mar 2019

You can also deploy Netlify sites from

AWS Cloudformation - example
Terraform
Netlify OpenAPI
& the Deploy to Netlify button

Lots of awesome ways to get sites & apps live on Netlify

philhawksworth Developer Experience Engineer

Mar 2019

The Deploy To Netlify button (DTN) is a really good way to deploy to Netlify either for the ﬁrst time, or as a
way to bootstrap a project from a prebuilt scaffold.

There are a number of example templates which can be cloned and deployed with just a few clicks over at
https://templates.netlify.com

DavidWells Netlify Alumni

Mar 2019

Also deploy via real world buttons!

One-Press Deploys: Triggering a Build in Netlify via an Amazon IoT
Button

Writing about the big beautiful mess that is making things for the world wide web.

perry

Mar 2019

I would really love to see more “weird” ways to deploy. What if you could deploy by remote controlled car,
Skip to main content
by drone, by pinball machine, by alexa skill, by light sequencer…

philhawksworth Developer Experience Engineer

Mar 2019

There is a nice little video of @rafa deploying via Siri:

Rafa
@rafahari

I can now ask Siri to trigger a new build on any of my websites with Shortcuts and @Netlify
https://t.co/za8eBjrf2B

0:00 / 0:25

7:20 PM - 18 Sep 2018

250

43

And I use the free cron jobs on webtask.io to deploy a static, pre-generated clock every single minute!
(which is silly, but possible):

https://setyourwatchby.netlify.com/

Skip to main content

DavidWells Netlify Alumni

Apr 2019

You can also deploy from code sandbox!

Deploy CodeSandbox to Netlify

Announcing the CodeSandbox Netlify integration. Create and deploy sites to
Netlify directly from within CodeSandbox!

closed on Sep 30, 2019. Create a new topic for help! :)

Archived on Mar 19, 2024

Related topics

Topic

Getting started, for semi-beginners

netlify-dev-open-beta

How can I update code that’s been uploaded via Netlify Drop

without using GitHub
netlify-newbie

deployment

How to directly deploy the update site using commands
deployment

Deploying static site using netlify cli

deployment

netlify-newbie

netlify-cli

Duplicate site with API
netlify-api

deployment

git

Replies

Views

Activity

9

1

6

1

3

1.3k

Oct 2019

12.0k

Jan 2020

760

May 2021

568

Jul 2022

2.5k

Sep 2022

[Support Guide] Debugging Netlify site builds

support-guide

fool

Mar 2019

Last reviewed by Netlify Support - October 2024

Note: This article is only about builds within Netlify’s Continuous Integration (CI) environment, as
triggered from git commits or from incoming build webhooks. You can learn more in depth about how
Netlify builds your site in this article about how our build bots build sites.

Some background

There are a fair number of reasons that a build could fail in Netlify’s CI environment, even if building works
locally. Testing locally is always the place to start, and the thing we will recommend to you ﬁrst when

asking for help. Further, you should make sure your build works locally from a fresh clone of the
respective branch of your repository. An existing local copy of your code can have local changes that are
not reproduced by a git clone, which is how our build network fetches your code, before starting your
build.

Note also that there is no “cache” of your build - we cache only your dependencies, NOT the actual ﬁles
from the last build - those are on our CDN but not available directly during build. The intended use pattern
is: “check all the ﬁles you need to regenerate your site into git, and let us regenerate the site completely
each build from that source code”. It’s an antipattern to commit your node_modules folder or pre-built ﬁles
already in your publish directory, unless you are NOT having us build your site.

Debugging

The most likely reason for a build failure on Netlify happens when our build environment isn’t conﬁgured
to match your local environment. There are other reasons as well, which you can read more about here,
in our article on troubleshooting build problems, but the version mismatch is the probable reason for
problems. This article describes all the possible build settings and versions and how to set them, so it is
a great place to start when reviewing our conﬁguration versus your local conﬁguration. Read on for more
detailed advice on what to try for your build to get it working!

Since most of our builds use Node.js/Javascript, you should make sure that we build using the same
versions of Node.js, npm, and the same Node environment settings that you do locally. To check that,
you can simply run node -v in the terminal.

Our current default versions as of April 2024 (though subject to upgrade at any time) are:

a NODE_ENV setting of development

Skip to main content

Node v18 (any version that nvm can install)
NPM - Any version available via NPM (default with that version of Node)

Yarn v1.22.19 (any version available via their installer) (note that we only install Yarn automatically if
you have a yarn.lock ﬁle. If you mean to use Yarn but don’t have a yarn.lock in your

repository, add Yarn to your package.json so we install it for you before you try to use it

)

You can adjust those versions as follows:

Set the Node.js environment with the NODE_ENV variable
Set a NODE_VERSION environment variable from the “Build and Deploy” site settings page in our UI

- in the “Build Environment” section. The value inside can be anything you would use with nvm (eg
  8 or 10.11.2 ). You can also use a .nvmrc ﬁle with this number in it.
  Set the npm version by setting an NPM_VERSION variable
  Set a Yarn version with the YARN_VERSION variable

If your build is hanging or terminating abruptly, you could be using too much memory or trying to deploy
so many new ﬁles we can’t complete the deploy in the default time limits. This post has some more
information on those limits and how to troubleshoot.

What next?

In case that doesn’t help you ﬁx your build, the easiest way to debug your build in our environment is to
pull down the Docker container that we use as a build image and use it interactively. You must ﬁrst install
Docker (it’s free!) from this website or use your preferred package manager. Then, using a fresh clone of
your repo, follow the steps outlined in this doc to use our build container locally: GitHub - netlify/build-
image: This is the build image used for running automated builds

Should you have a site that uses plugins - particularly essential ones like gatsby or nextjs - you can and
should test a build in our CLI. This will let you see a bit more about what ﬁles are generated, and the
output is a better representation of what our CI does than the advice above about testing in our docker
build image. This workﬂow is described in this article: Get started with Netlify CLI | Netlify Docs

In case that still doesn’t help, don’t give up! Please start a new thread, link to this one, and tell us the
information you gathered while debugging:

a link to your most recent deployment attempt in our UI (should start with
https://app.netlify.com/sites/…). This will only help the community debug in case your build logs are
public, of course. Most public repositories are set with public build logs, and our Support team can
by request make your own site’s build logs public even if it’s a private repository.
include the speciﬁc log line you think the error is in, from that latest deploy you tried to debug and
have linked. Make sure you ﬁnd the root cause error line - Build script exited with Error

1 is a SYMPTOM of some prior error from your build script
give a short, succinct rundown on what you have tried so far and we’ll try to help.

Error running command: Build script returned non-zero exit code: 1

[Support Guide] Frequently encountered problems during builds

Netlify deployment fails with message: failed during stage 'building site': Build script returned …

Skip to main content

Gatsby builds only failing on Netlify

Build fails on push but not when locally built and deployed using Netlify CLI

128 more

Related topics

Topic

Can you help me to debug this?

deployment

building

Replies

Views

Activity

1

1.5k

Dec 2019

[Support Guide] Frequently encountered problems during builds

support-guide

38

65.0k

9d

May you please help!

deployment

Hugo BUILD failing due to outdated version
hugo

netlify-newbie

building

Netlify BUILD on the netlify website fails, but works in my machine
through netlify-cli

building

1

1

3

767

Nov 2022

1.5k

Aug 2020

1.5k

Jun 2020

[Support Guide] Frequently encountered problems during builds

support-guide

fool

Last reviewed by Netlify Support - October 2024

Overview

Mar 2019

Sites on Netlify can be built using a variety of tools — different frameworks, programming languages and

approaches. It can be incredibly frustrating to see your site fail to build! If you have a build on Netlify that
is failing with an error message that you don’t understand, you are not alone. Here you’ll ﬁnd some
common build failure messages, and probable solutions to their causes. If you’re looking for more general
information on build debugging, or interested in details about how our builds work, these other articles are
probably a better starting place:

A blog post with a mid-level overview of how our build system works
Build debugging advice in the community

In case your problem isn’t seen here, or you don’t understand our suggested repair, or you otherwise

need help - please don’t hesitate to post a new topic with a link to your build logs so this community can

take a look and point our collective intelligence at your situation

Before you begin: switch on debug mode

Do you know Netlify has a special environment variable you can set to get more information about your
build? It’s simple to do and may help. Don’t forget to switch it off after you have found the problem, as it
does slow down your build and may use up more build minutes!

In the Netlify UI,(not the netlify.toml) set the environment variable NETLIFY_BUILD_DEBUG to true to
print additional debugging information in the build logs. The output does not contain sensitive information.
To disable debugging, delete the variable. Alternatively, delete everything in the variable’s Value ﬁeld.

For more information, give this a read through.

1. First steps - ruling out the obvious

In case your build fails on Netlify, ﬁrst make sure it builds locally in your own development
environment. This is a prerequisite to all of the below suggestions!

If your build works locally, the next debugging step is to ensure the package versions we use to
build match the ones you use in your own development environment. You can ﬁnd the settings for
these in our Build Settings doc. That’s the leading cause of build failures.
Skip to main content

1.5 Build logs

If you aren’t familiar with Netlify’s build logs, please check out this post before reading further. Many of
the issues below reference messages you’ll ﬁnd in our build logs.

2. Command not found - we need to know what your environment needs

One commonly observed issue with builds is failure with a message in the pattern of jekyll: command
not found or gulp: command not found .

This means that the software required for that command you’ve set our build to use hasn’t been installed
in our build environment.

We have very few programs installed by default, so you must specify installation of the software you need
by including the proper conﬁguration ﬁle, like a Gemfile for Ruby programs like jekyll , or
package.json for Node.js programs like gulp. Check out the Build Settings doc for more details on
how to tell us to install your toolchain.

Once we ﬁnd your conﬁguration ﬁle in the root of your repository, we’ll automatically use it before trying
to run your build command.

Note that by default the build system ONLY looks for the conﬁguration ﬁle in the root of your repository .
If your conﬁguration ﬁle is located in a subdirectory, you will need to change your folder structure or
specify the directory to change to before starting the build. You can do this by adding a netlify.toml with a
base property or by going to

Settings > Build & deploy > Continuous Deployment > Build settings

and entering a base directory. If you’re using a monorepo, please see our advanced monorepo
conﬁguration options here.

3. Case sensitivity - not all ﬁlenames are treated the same way

If you develop on Windows or OSX, and your code includes a ﬁle or reference to a ﬁle like
jQuery/jquery.js — the Netlify build may fail due to the mixed case ﬁlename. The ﬁle system used in
Netlify builds is case sensitive, while your build environment is not. Unfortunately, the error messages that
result may not clearly indicate this!

It can be challenging to effectively change case of a ﬁle stored in Git from your case insensitive local
environment. This article on StackOverﬂow describes a good workﬂow, as simply renaming and
committing will almost certainly not have the desired effect.

4. Large ﬁles or sites can cause issues

Speciﬁcally:

Files over ~20 MBytes in size are not well-supported by our CDN and may fail to upload to our
system, causing your entire deploy to fail. You should consider using Git Large File Storage (LFS)
directly with your Git provider, or if that doesn’t appeal, host large content elsewhere (e.g.

Skip to main content

YouTube embedded videos). It’s also a good idea to conﬁrm that you aren’t accidentally
adding big ﬁles you don’t need.
Sites with tens of thousands of html ﬁles can lead to long processing times. This shouldn’t cause the
deploy to fail, but even a “quick” manual deploy can take quite awhile (many minutes) to ﬁnish if you
have tens of thousands of ﬁles and they are all “new” to our CDN by checksum. Check out this
article that has more details about what we consider changed/new content for some advice on
how to avoid this pattern in your code, and get lightning fast uploads and better site performance for

your visitors.

5. Don’t call me “build”!

Don’t name your build command build or try to use the debug build steps to run a build locally in
our production build environment. This will fail and give you a strange looking build log with non-obvious
errors, but certain failure!

6. Missing node packages that are located in package.json

So you have gulp mentioned in package.json, but still get gulp: command not found when you try to
build with it? One potential cause is that when you set the NODE_ENV environment variable to
production, any devDependencies in your package.json will NOT be installed when we automatically run
yarn install or npm install at the beginning of the build. So - watch out for that difference vs
NODE_ENV=development (our default)

7. Post processing

There are some situations during build that may lead to a failure in post processing — many things that
fail will lead to a retry; if after four retries it still hasn’t worked:

3:25:03 PM: Starting post processing

3:25:27 PM: Starting post processing

3:26:54 PM: Starting post processing

3:31:15 PM: Starting post processing

3:41:46 PM: Starting post processing

…we fail that deploy. You’ll probably need to create a new topic here in community if this is the case to get
more details about the error, unless you want to follow the next piece of advice.

Since the failure is in the asset optimization portion of the build, you may try disabling asset
optimization if your site fails deploy during post processing and/or some of your assets end up with
nonsense paths on the portion of our CDN hosted on Cloudfront. For instance, if you ﬁnd an incorrect
Cloudfront URL with a {$rootfolder} component in it, you’ll need to review your CSS as there is likely
an incorrect reference causing the behavior. Or, you could disable CSS bundling and miniﬁcation to work
around this.

Note that redirects or custom header rules that we can’t process at all are mentioned near the end of the
build log and in the Deploy Summary for a deploy, but will not cause the build or deploy to fail.
Skip to main content

8. Build fails with Error 128

This error code usually means that there was some problem in cloning your repository.

In 99% of cases, it means we don’t have permission to clone the repository you are trying to deploy. The
usual cause for this is that someone made some changes to settings for the parent organization, or
repository, some time after linking the repository to your site (or that it was never linked correctly).

We only have permission to create a copy of your code when you link the repository. So, if you are seeing
an Error 128, relinking your repo via our UI is a good ﬁrst attempt to ﬁx things (go to Settings > Build &
deploy > Continuous deployment > Repository , select Manage repository , then Link to a different
repository ). If you do this, please check your WebHook settings at your Git provider to be sure you don’t
have any duplicate Netlify webhooks (see #9 below) - you need only ONE of those per repo!

Note : Your GitHub, Bitbucket, or GitLab user account may not have the privilege level required to link the
repo to Netlify, even if you can log in and access it from the the Git host’s website. You generally need
administrative privileges on the repository and/or owning organization. Related: documentation about
Netlify & GitHub permissions

In the other 1% of the cases, there is some OTHER problem cloning your repo - perhaps around Git LFS,
Large Media, or some other git-related situation, and in those cases our Support team will have to look in
our internal logs to debug things. We’ll still need a link to your deploy logs to do so.

9. Multiple builds

So you’ve noticed that every time you git commit , you get multiple builds when you were only
expecting one. What gives?

This can happen if you have multiple copies of our webhook in your settings at your git provider, when you
need only one. You’ll need to visit your git provider to check out your webhooks. Follow these URL
patterns to ﬁnd your settings:

GitHub: https://github.com/LOGIN/PROJECTNAME/settings/hooks

GitLab: https://gitlab.com/LOGIN/PROJECTNAME/settings/integrations

Bitbucket: https://bitbucket.org/LOGIN/PROJECTNAME/admin/addon/admin/bitbucket-
webhooks/bb-webhooks-repo-admin

10. Build cache

We cache certain directories (typically — ones that contain dependencies that we installed for your build)
at the end of a successful build, to make future builds faster. Changes to those ﬁles — for instance
package.json, yarn.lock, Gemﬁle.lock — will cause us to re-run the installation command which may
update cached dependencies if needed. It isn’t guaranteed a change will take place if the previous
dependencies still satisfy the installer, though! You can check which directories are cached in our build
image, but they are also listed below:

Skip to main content
node_modules

.yarn_cache

.bundle

bower_components

If a build fails, it’s worth retrying with a cleared build cache to see if this works better. You can do this by
clicking the “Retry” button on the header of a failed deploy logs page, and then clicking the “Clear cache
and retry ” option.

11. Yarn

If you use our legacy Ubuntu 14.04 Trusty or Ubuntu Xenial 16.04 build image (see also this article for
details about a recent launch of a newer version, and you have a /yarn.lock ﬁle, Netlify builds set
the --ignore-optional ﬂag is passed to yarn install by default. You can’t unset this, but you can
override it by adding --no-ignore-optional to your YARN_FLAGS build environment variable.

Note that if you do not have a /yarn.lock ﬁle, our build system will not install yarn and it will be
unavailable in your deploy; you’d need to have it listed in package.json for npm to install in that case,
before you can run it.

12. Gatsby and Environment Variables

Don’t forget that Gatsby is special in its treatment of Build Environment Variables — whether set via
netlify.toml or via our UI. You can access these variables during build via the normal variable handling in
your build pipeline when creating your site from source code, but can also directly access variables at
browse time that you name following the pattern $GATSBY_VARIABLENAME in your JavaScript as
described here: https://www.gatsbyjs.com/docs/environment-variables/

13. Hugo

If you are getting an error 255 status when building a Hugo website, try setting a HUGO_VERSION
environment specifying he version you are using locally. This will set the hugo version that our buildbot
uses to build your site.

If you would like to use the new SASS compilation features in recent Hugo releases (using the “extended”
version of the binaries), you’ll need to make sure you are using our newer Xenial build image as
described in this blog post. In that environment we use hugo 0.53 extended by default.

14. Bitbucket and Pull Requests

Due to limitations with Bitbucket’s API, we do not build deploy previews for pull requests on Bitbucket
repositories. This is speciﬁcally due to the the fact that they do not send complete refs in their webhooks

for pull requests. We do not anticipate that bitbucket will change things here since the open bug is over 6
years old. GitLab and GitHub work perfectly for PR’s and deploy previews!

15. Deploys seem to fail the ﬁrst time they build; clearing cache and
    redeploying works - why?
    Skip to main content

Here are some potential root causes - check to see if any apply to your build.

16. Build times out

Sometimes a background process lingers after the build script exits, causing your build to time out and
fail. For example, you might see something like this, with a long pause between log lines:

3:34:15 PM: Started saving pip cache
3:38:01 PM: Execution timed out after 15m0s

To see what the build is “still” doing in the background, you can add && ps auxw; false to the end of
the build command, as described in this post.

Another cause of build timeouts is excessive logging. Check out this post for what to do if your build logs
simply cut off.

Wrapping it up

This isn’t a list of every build failure possible, but it does address at least 90% of build problems we see. If

this hasn’t worked in debugging your build, try posting a question in the Support Category and we’ll get
you some advice!

[Support Guide] My site deploy fails unless Netlify's build cache is cleared

Next.js 9.3 and getServerSideProps not working

Error while building site

Gatsby build is not found

Cant deploy my jekyll blog

237 more

cjs

May 2019

It would be useful if your FAQ above included the following information:

The ﬁnal part of the build after it gives the number of ﬁles to upload can time out without completing if you
have many tens of thousands of ﬁles. However, some of the ﬁles (typically a few tens of thousands) will
have been processed, so if you re-run the same build you ﬁll ﬁnd that there are now fewer ﬁles to upload.
Repeating build re-runs will eventually get all your ﬁles uploaded and the build will complete.

However, there is a second “uploading” stage after the build has completed that can easily take several
hours for the ﬁrst deployment for a site with many tens of thousands of ﬁles. Once that deployment has
completed, subsequent deployments (both build and subsequent upload stage) should be fairly fast (a few
minutes) so long as there aren’t too many unchanged ﬁles.

Skip to main content

Automatically bumped on Jun 5, 2020

Automatically bumped on Jul 14, 2020

Split this topic on May 24, 2021

A post was split to a new topic: Build failed despute sucess with netlify dev

Automatically bumped on Jul 10, 2021

hrishikesh

Support Engineer

Last reviewed in August 2021.

hyped1

Aug 2021

Oct 2021

Hi,
I have a Gatsby site deployed on Netlify but I am running into an issue with my latest deploy. After reading
the above & Netlify’s docs, I believe I am encountering #7 - post processing issue.
The fail message says: ‘Deploy processing failed after 5 attempts.’

I have tried the following:

1. Added CI='' npm run build as build command to bypass warning errors
2. Disabled Asset optimization
3. Downloaded Netlify CLI and ran netlify dev , netlify build (both successful)
4. Ran DEBUG=\* netlify deploy and am seeing: “error_message”: “Deploy processing failed after

5 attempts”.

Can you please advise on next steps to debug this issue? I have not been able to deploy my site since
yesterday.

Thanks!

hrishikesh

Support Engineer

Oct 2021

Hi @hyped1 ,

Are you using Netlify Forms? If yes, could you share the form’s code?

hyped1

Oct 2021

Hi @hrishikesh , I am using Netlify forms and have multiple forms on one page. I realized the deploy is
Skip to main content
successful when I only have one form.

I am setting each form name, id, and ﬁelds dynamically (using GraphQL, Gatsby, Contenful). Here is my
form’s code:

<form
name={form.title}
method="POST"
data-netlify="true"
id={form.slug}
>
<div
  className="input_padding_bottom  mt-36"
  data-delay="100"
>
  <input
    name={form.formField1}
    type="text"
    id={form.formField1}
    size="30"
    placeholder={form.formField1}
    required
  />
  <label
    className="input_label"
    htmlFor={form.formField1}
  ></label>
</div>

<div
  className="input_padding_bottom "
  data-delay="150"
>
  <input
    name={form.formField2}
    type="text"
    id={form.formField2}
    size="30"
    placeholder={form.formField2}
    required
  />
  <label
    className="input_label"
    htmlFor={form.formField2}
  ></label>
</div>
<div
  className="input_padding_bottom "
  data-delay="150"
>
  <input
    name={form.formField3}
    type="text"
    id={form.formField3}
    size="30"
Skip to main content
    placeholder={form.formField3}

required
/>
<label
className="input_label"
htmlFor={form.formField3}

> </label>

</div>
<div className="" data-delay="100">
  <textarea
    name={form.formField4}
    cols="40"
    rows="4"
    id={form.formField4}
    placeholder={form.formField4}
  ></textarea>
  <label
    className="input_label slow"
    htmlFor={form.formField4}
  ></label>
</div>
<button
type="submit"
className="send_message"
id="submit"
>
{form.cta}
</button>
</form>

hrishikesh

Support Engineer

Oct 2021

Well this piece of code looks ﬁne. I believe the error would appear due to the ﬁelds being ﬁlled up

dynamically.

In general this might happen when your attribute value contains ' . For example, id = "let's" is
wrong, id = "let us" would do.

hyped1

@hrishikesh that solved it! One of my ﬁelds had an apostrophe. Thank you for your help!

dimola7

Oct 2021

Nov 2021

Hi, I have my frontend and backend in the same folder, but want to host them separately, with the frontend
on netlify, I put /client in the build, so it goes into the client folder to build, but deployment has been failing.
This is the site name unrufﬂed-euclid-43cc20

Skip to main content

perry

Nov 2021

hi dimola, this isn’t really super related to the thread, generally. can you start a new thread please and
post a recent failing build log along with information on what you have already tried? thanks.

dimola7

Nov 2021

okay, thank you for your response, how do I start a thread sorry, couldn’t ﬁgure it out, so i came here

perry

Nov 2021

your view may look a bit different, but from the main forums page at answers.netlify.com please just
select “new topic” and give us as much information as possible:

Nov 2021

dimola7

okay, thank you very much

Automatically bumped on Dec 25, 2021

Split this topic on Feb 15, 2022

A post was split to a new topic: Unable to deploy nft-minting-app

Automatically bumped on Apr 14, 2022

[Support Guide] Making sure your builds use appropriate
resources for Netlify’s build system

building

support-guide

fool

Last reviewed by Netlify Support: March 2025

Nov 2019

Hopefully, your builds at Netlify “just work”, once you have things conﬁgured. That’s the intention and the

common case, but for those times when your reality falls a bit short of our dream, this article talks in detail
about some of the limitations that customers run into while building and how to work around them.

The operation of Netlify’s build system is pretty well documented in several places such as:

our ofﬁcial documentation
you can see the source code describing how our build works in this repository:
https://github.com/netlify/build
you can simulate a netlify build in our CLI as described in this documentation

a somewhat conversational and simple “how it works” guide.

Today, we’ll talk about why this is a case where size does matter!

Memory Usage

Let’s start with the size (memory usage) of your build processes. The reason they matter is that our
default build environment is not oversized: On the Free and Starter plans, we allocate you 8 GiB of
memory and 3 CPUs. You can count on that for every build, and you should design your build process to
use those benchmarks as a maximum. On Paid plans (Pro, Business, and Enterprise without High-
Performance Builds) you get up to 11 GiB of memory and 6 CPUs. Finally, Enterprise customers using
High-Performance builds get up to 36 GiB of memory and up to 10 CPUs.

How can you tell how much memory is used? One way is by using the “local build” process and
watching how much memory the CLI process and subprocesses use via your local memory proﬁler of
choice (mine is top(1) ) - that will be fairly close to the same thing that we are running on our hardware.

This article from Gatsby has some very practical advice on proﬁling your memory usage (applicable to
anyone using Node.js during their build - not just Gatsby users!!) and also, reducing it.

If you try to use more memory, there are a few potential results, but it’s likely that your build process will
abort mid-build, perhaps in the same place each time, or perhaps in slightly different places, depending
on how you use memory.

This might look like a silent failure (logs cut off mid build; build is marked as failure)

Skip to main content

Or perhaps we tell you it got killed: 4:15:11 PM: /usr/local/bin/build: line 34: 1208

Killed hugo --log --templateMetrics

But most often looks like a failure in some component of the build, such as:

    1:00:42 AM: [1676:0x3b4d0a0]   122458 ms: Scavenge 1325.8 (1422.8) -> 1324.9
    1:00:42 AM: [1676:0x3b4d0a0]   122467 ms: Scavenge 1326.0 (1423.3) -> 1325.1
    1:00:42 AM: [1676:0x3b4d0a0]   122476 ms: Scavenge 1326.2 (1423.8) -> 1325.3
    1:00:42 AM: <--- JS stacktrace --->
    1:00:42 AM: ==== JS stack trace =========================================
    1:00:42 AM:     0: ExitFrame [pc: 0x13802305be1d]
    1:00:42 AM: Security context: 0x2df5db21e6e9 <JSObject>
    1:00:42 AM:     1: SourceMapConsumer_allGeneratedPositionsFor [0x385e65beda99
    1:00:42 AM:     2: /* anonymous */(aka /* anonymous */) [0x28e39f0f6b99] [/op
    1:00:42 AM: FATAL ERROR: Ineffective mark-compacts near heap limit Allocation

This article has a lot more details about how to try to work around this memory allocation issue. Hopefully
it helps you, though it is not a magic bullet / one-size-ﬁts-all “solution”:

[Support Guide] What can I do if my build fails for memory-overallocation-related errors?

Last updated by Netlify Support: October 2024 Are you struggling to get your build working? Most
build errors are caused by problems in code or data, and for those errors, our best guide / general

starting place for debugging build troubles is this one: But, sometimes your build is working ﬁne and
suddenly ends with some inscrutable errors that don’t seem to be “about” your code or site even.
Perhaps you see an error message like this in your builds? 2:28:35 PM: <--- Last few GCs ---> 2:…

Lots of ﬁles?

There is another frequent failure mode around deploying a successful build. Your script runs and
completes successfully. We begin to upload…and never ﬁnish:

4:50:11 PM: Build script success
4:50:11 PM: Starting to deploy site from 'public/'
4:50:17 PM: Creating deploy tree asynchronously
4:54:39 PM: 61049 new files to upload

What’s happening here? We have to upload your changed ﬁles (please check out this article about
what “changed” means, and how to reduce the number of subsequent builds) via our API, and if there
are tens of thousands of them, it is quite likely that you won’t be able to complete that in the allocated time
(which is 15 to 30 minutes for the whole build + deploy process). Aside from slowing down or potentially
blocking your deploys, it’s also a bad experience for your return visitors - they cannot use their local

browser cache from last visit for ﬁles whose checksum or name has changed in a more recent deploy. I
don’t think you really changed 61,000 ﬁles in that last deploy with intention - I think you changed a single
ﬁlename that is included in all ﬁles, effectively changing them as well. So…don’t do that :).

If you have a lot of changed ﬁles but MAYBE not too many, you may see an error like this happen within
Skip to main content
your normal build time limit:

failed during stage 'deploying site': Failed to execute deploy: Error: deploy

timed out while waiting to enter states: prepared,ready

In that case, it’s worth posting a link to your deploy in this thread, to see if we can help you extend that
time limit (which is by default only 5 minutes to “wrap things up” after the build completes), since this may
help allow the ﬁles to be sent within that default time window I mentioned earlier. Please note that the
solution for the above error message is only applicable for the error message quoted just above, not
builds in general!

Build keeps failing to deploy site

[Support Guide] Debugging Netlify site builds

What gets stored in the Build Cache?

Speeding up build times by caching assets

Hugo is killed when building

44 more

Automatically bumped on Jun 9, 2022

Automatically bumped on Aug 11, 2022

Automatically bumped on Oct 12, 2022

Automatically bumped on Dec 19, 2022

Automatically bumped on Feb 25, 2023

Automatically bumped on May 3, 2023

Automatically bumped on Jul 9, 2023

Automatically bumped on Sep 15, 2023

Automatically bumped on Nov 18, 2023

Automatically bumped on Jan 11, 2024

Automatically bumped on Mar 3, 2024

Skip to main content

Automatically bumped on May 5, 2024

Automatically bumped on Jul 6, 2024

Automatically bumped on Sep 7, 2024

Automatically bumped on Nov 5, 2024

Automatically bumped on Jan 2

Automatically bumped on Mar 1

Related topics

Topic

Build Image machine spec (ram/cpu etc.)
deployment

Netlify Plans details
deployment

nextjs

Netlify Build issue while generating NextJS static pages
building

nextjs

Command failed with exit code 137 and 2

deployment

building

Pricing plans for custom/better virtual machines for deployments
gatsby

billing-pricing

Replies

Views

Activity

4

2

8

7

3

2.5k

Jun 2021

1.1k

Jun 2021

946

Jul 2022

36

Sep 2024

770

Apr 2022

[Support Guide] Debugging failed builds 101 or build failed with
non-zero exit code

support-guide

sid.m Support Engineer

Last checked: November 2024

Jun 2024

So your build failed and you’re unsure where to start to ﬁx it? You’re in the right place! In this guide we’ll

walk through the basic steps of how to locate the cause of a build failure and where to go to ﬁnd solutions.

Locating the cause of the issue

If your build fails on Netlify, the ﬁrst step in debugging is to ensure it builds locally. Once you conﬁrm the
build succeeds locally, you’ll want to check out the Netlify build logs. To ﬁnd your build logs, go to your
Netlify dashboard for your site. On the left, you’ll see a link for Deploys. Clicking that will bring you to a
page of deploys - one for every build you’ve created. Clicking on a deploy brings you to the deploy log:

To view the logs in more detail, click on the dropdown where you see the failure, in this case, “Building.”
This will allow you to browse the build logs in detail.

A build will fail if it returns a non-zero exit code. This will show up near the end of your logs:

While it may appear at ﬁrst glance that this exit code is the reason for failure, this exit code is
Skip to main content
actually a symptom of an error earlier in the log. This exit code doesn’t provide any hints as to what

caused the failure.

However, you can ﬁnd those hints further back in the deploy logs. The logs contain speciﬁc messages that
indicate why a build has failed. A few lines above this exit code we see a detailed error message that
gives us more insight into the cause of this failure:

It’s useful to note that build failures can be incredibly varied and sometimes the reason for the failure

won’t be as clear or will take a little investigative work to locate.

Another useful way to locate the cause of the build failure is our new “Why did it fail?” AI feature. This
will do the work of digging through the logs and identifying the root cause for you. Take the failed build

from above, for example. If I use the “Why did it fail?” button, I see the following explanation:

Finding solutions

So you successfully located the error message that points to the cause of the failure, now how do you ﬁx

it?

Sometimes, the error message tells you exactly what to do to solve it:

In this case, updating Node.js to the speciﬁed version will solve the issue.

However, other times the error message is confusing or unclear or you don’t know where to even start. In
Skip to main content
those cases, it’s useful to search our forums for the speciﬁc error to see if other people have encountered

the same issue. You can also try searching the Netlify Docs. If that doesn’t help, try doing a quick Google
search on the error in your log. Oftentimes build errors that appear in your Netlify build have happened
elsewhere off of Netlify as well, and ﬁnding a solution just takes a little bit of digging. Odds are someone
has had the same question as you and likely they have offered a solution, too.

If you still ﬁnd yourself stuck, create a new forums post referencing the speciﬁc error that you’re seeing,
as well as steps you’ve taken to resolve the issue, and the name of the site in question.

[Support Guide] Compiled Build and Deploy Resources -- start here!

Automatically bumped on Aug 28, 2024

Automatically bumped on Oct 26, 2024

Automatically bumped on Dec 23, 2024

Automatically bumped on Feb 20

Related topics

Topic

Cryptic “Build script returned non-zero exit code: 2” error with

no other output

deployment

building

Netlify couldn’t deploy the site
building

deployment

Build failed due to a user error: Build script returned non-zero exit
code

deployment

netlify-newbie

Failing build: Failed to build site

building

Skip to main content

Replies

Views

Activity

6

5

1

1

321

Apr 2024

1.6k

Aug 2022

290

Jul 2023

4.6k

Sep 2019

Topic

Replies

Views

Activity

Help me about Failed during stage ‘building site’: Build script
returned non-zero exit code: 1
building

netlify-newbie

deployment

1

1.9k

Mar 2022

[Support Guide] Compiled Build and Deploy Resources – start

here!

deployment

building

support-guide

hillary

Technical Program Manager

Jan 2022

We want to help you build and deploy your site as easily as possible. Our team has written numerous
support guides on frequently encountered problems during builds, build/deploy behaviour, drag and drop
deploys, and more. In an effort to streamline your searching, we have compiled a list of our Support
Guides related to builds and deploys. Each guide contains a ton of useful debugging tips that can likely
help you solve your problem.

Troubleshooting and high-level debugging

Debugging failed builds or build failed with non-zero exit code
Frequently encountered problems during builds
Debugging Netlify site builds
Deploying a site to Netlify - different approaches
What can Netlify’s staff help debug about my failing builds or deploys?
Testing your Netlify builds
Making sure your builds use appropriate resources for Netlify’s build system

Optimizing performance

How can I optimize my Netlify build time?
Build Performance Pro-tips
How long should Netlify builds take?

Build stuck or still running

My drag and drop deploy is stuck in “Uploading” status
Hung or stuck, but seemingly successful build
“Build completed successfully, but the following processes were still running” - how to
remove

Builds Failing

What can I do if my build fails for memory-overallocation-related errors?
Netlify app builds locally but fails on deploy (case sensitivity)
My site deploy fails unless Netlify’s build cache is cleared
“…does not exist or you do not have permission” with failing builds

Skip to main content

Conﬁguring Builds

Conditional build/deploy behavior for context / branch on Netlify
Using an SSH key via environment variable during build
How do I access private repositories in the build environment?
How can I disable automatic git deploys?
Making analytics distinguish between deployed branches

If you are still having problems after reading through these guides please open a new thread and provide
your site name, as much information as you can on what you have already tried, what your build settings
are, your package.json , etc. Additionally, if you have an idea for a Support Guide that you don’t see
above, please open a new thread and let us know! Thanks!

Solved by Sumair1981 in post #9

Thanks for your response, I switched my site’s image to: Ubuntu Focal 20.04 (default) then it
deployed and updated my site successfully. Thanks & Regards.

Build failed with the error - TypeError: Cannot read properties of undeﬁned (reading 'get')

Wordpress blog not transferred properly, content pages display "page not found"

"build.command" failed. Command failed with exit code 1: parcel build index.html

Build exceeded maximum allowed runtime please help!

Building problems

257 more

Automatically bumped on Jul 20, 2022

Automatically bumped on Sep 21, 2022

Automatically bumped on Nov 25, 2022

Sumair1981

Jan 2023

I am having problem in trig erring this site of mine.
Site name:
gracious-shannon-74dda4

M.Sumair Kaleem

Made with your support by M.Sumair Kaleem - Computer Software Engineer / Blogger - Sindh,
Pakistan

Skip to main content

Please click below both URLs for a clear preview:

this site's issue.png

Google Drive ﬁle.

deploy failed.png

Google Drive ﬁle.

Waiting for the reply.

audrey Three Days Streak

Jan 2023

@Sumair1981 , the error says you’ll need to update your build image. Please give that a try and let us

know if you run into any trouble! Netlify App

Sumair1981

Jan 2023

Thanks for your response,
I switched my site’s image to: Ubuntu Focal 20.04 (default) then it deployed and updated my site
successfully.
Thanks & Regards.

spritetv8

it didn’t work for me

SamO Regular

We will need more information to assist you.

Oct 2023

Oct 2023

MODULE NOT FOUND Error when trying to deploy code on netlify using CLI and getting 'npm r…

Related topics

Skip to main content
Topic

Replies

Views

Activity

Topic

Replies

Views

Activity

[Support Guide] Frequently encountered problems during builds

support-guide

38

65.0k

9d

[Support Guide] Using build logs to debug your build process
support-guide

Project not building

deployment

building

netlify-newbie

Build failed - lingering processes

deployment

1

1

2

9.6k

Aug 2019

831

Apr 2023

1.3k

Jul 2020

[Support Guide] What can I do if my build fails for memory-
overallocation-related errors?
support-guide

building

22

6.6k

16d

[Support Guide] Making analytics distinguish between deployed
branches

deployment

support-guide

netlify-analytics

philhawksworth Developer Experience Engineer

Mar 2019

Last Reviewed by Netlify Support November 2024

Especially useful if you are running split tests, or want to be sure that you are only viewing analytics data

related to you production branch, with Snippet Injection, you can modify the analytics code injected into
each page of your site.

Snippet injection is conﬁgurable in your site’s deploy settings and give access to environment variable

including things like the active branch for that build.

https://app.netlify.com/sites/{YOUR_SITE}/settings/deploys#snippet-injection

The video below (~5 mins) walks through setting this up.

[Support Guide] Compiled Build and Deploy Resources -- start here!

Deploy Preview works but not actual production site

blackforestboi

Hello @philhawksworth

Thanks for the great videos you provide!

Do you have an idea on how to use netlify’s internal analytics tool to get data on the split tests?
Can’t seem to ﬁgure this one out.

Thanks!

fool

Feb 2020

Feb 2020

I don’t think it’s possible at present. I’ve gotten a feature request ﬁled for us!

philhawksworth Developer Experience Engineer

Feb 2020

That’s a great question!
Skip to main content
Happy to see @fool submitting a feature request for that.

(and thanks for the kind words, @blackforestboi !)

Automatically bumped on May 21, 2020

Automatically bumped on Aug 24, 2022

Automatically bumped on Nov 1, 2022

Automatically bumped on Jan 6, 2023

Automatically bumped on Mar 15, 2023

Automatically bumped on May 21, 2023

Automatically bumped on Jul 26, 2023

Automatically bumped on Oct 3, 2023

Automatically bumped on Dec 8, 2023

Automatically bumped on Jan 30, 2024

Automatically bumped on Mar 20, 2024

Automatically bumped on May 23, 2024

Automatically bumped on Jul 24, 2024

Automatically bumped on Sep 27, 2024

Automatically bumped on Nov 25, 2024

Automatically bumped on Jan 22

[Support Guide] How can I disable automatic git deploys?

deployment

support-guide

laura

Senior Manager, Support Engineering

Mar 2019

Last reviewed by Netlify Support staff: December 2024

Sometimes your projects may really beneﬁt from automatic deploys, sometimes they won’t. For such
sites, you can create them entirely as manual deploys or using Netlify’s CLI. If you want to turn off
automatic deploys from git for a site that was linked with a repository, there are four easy options
outlined here. You can choose the option that works best with your workﬂow.

1. We have a feature called Locked Deploys that you can use to 'pin' a deploy on your production

URL.

To turn on the lock feature from your Deploys page, click the Stop auto publishing button.

That’s it! Netlify will no longer autopublish any deploys at your production URL.

However, deploys will still be built and will be available for you to preview and manually publish
whenever you want. You can still see all of your deploys as usual on your Deploys page in our UI.

When you are ready to resume automatic deploys, just click the Start auto publishing button.

2. If you no longer want to trigger deploys via git, you can remove the webhook created by Netlify

from your repository's webhook settings at your git provider. This is the way all GitLab and BitBucket

repos are conﬁgured, and some legacy GitHub sites as well. And as long as you don't remove our
deploy key, you can then trigger a deploy some other way - for instance, by pushing the “Trigger

Skip to main content

deploy” button on the Deploys page in our UI, or via Build Hooks or via our API. Note that folks
using the GitHub app won’t have this option!

No deploy previews for pull requests are created when you deploy this way, FYI.

3. Use GitHub checks to stop automatic deploys under certain conditions using the protected

branches feature. This last option is what we use internally at Netlify. We set it up this way so we
have a successful build, all of our tests ﬁnish, and we have a deploy preview to look at before
merging. So if a check fails, you’ll see a red x and your site will not merge & deploy:

If you’ve never used GitHub checks before, GitHub has easy, step-by-step instructions on how to set
them up.

Note: If you want to keep your Netlify site but permanently remove the link from your site to your git repo,

you can do so from the UI by visiting Site settings > Build & deploy > Repository . Then click ‘Manage
repository’ and select unlink repositories name.

There is an API endpoint to unlink the repo from the site, however. This means it is possible to unlink
repos using the API without contacting the support team if you want to do it yourself. The Netlify CLI tool

is a great way to call the API and it can be done using this below:

netlify api unlinkSiteRepo --data '{ "site_id": "<site API ID goes here>" }'

Note, the angle brackets should not be included. Here is a real world example (without angle brackets):

netlify api unlinkSiteRepo --data '{ "site_id": "1a997e22-11b7-44b7-945b-c062ef0

How to disable automatic builds?

How can i control publish manually?

Build & Deploy via webhook only

Can you make netlify wait for github CI to ﬁnish before starting its build?

Disable automatic builds from netlify site

5 more

devm33
Skip to main content

Jul 2019

Hey, it looks like option 2 is no longer possible for GitHub since Netlify moved to using a GitHub App
instead of webhooks. Removing the the GitHub App would apply to all of a user’s GitHub repos integrated
with Netlify.

Is there any update on removing the link to a repo from a site?

Automatic deploy only from speciﬁc repo folder

Und3Rdo9

Aug 2019

I didn’t see the option I needed, so I decided to post my solution here in case somebody has a similar
use-case.

I’m using a monorepo which currently contains two Netlify sites that need to be built & deployed if there is
any change in the respective package. I want to let my CI decide which Netlify site to deploy, so I don’t
want to enable automatic deploys from master. However I do want to keep the deploy previews from Pull
Requests to master.

Option 1 in the original post doesn’t really work for me because it might build a site when it is not
necessary and won’t publish my site if I trigger a build in CI. Option 2 does work completely either
because the webhook is also responsible for reading pull requests.
However, you can customise the permissions of the webhook, and remove the " Pushes: Git push to a
repository." permission to disable automatic master deploys, but keep pull requests builds and previews.

I’m not sure if this is the correct/best way to handle my case, so please let me know if you have any
suggestions.

cdierkens

Apr 2020

Hey, it looks like option 2 is no longer possible for GitHub since Netlify moved to using a GitHub App
instead of webhooks. Removing the the GitHub App would apply to all of a user’s GitHub repos
integrated with Netlify.

Is there any update on removing the link to a repo from a site?

I’m looking for an answer to this question as well.

luke

Support Engineer

Apr 2020

Sure, @root . Both @devotox and I did answer this question. I’ll be happy to go into more detail though.

We are unlinking sites here so that people can still use manual deploys but stop deploys from occurring
Skip to main content
when a git push to the upstream repo happens.

So, if you want start deploying again for the git push events, just re-link the repo again (or a different
repo if that is want you want to do). That is done at Site Name > Settings > Build & deploy > Build
settings, then click “Link site to Git”.

I said the button was labeled “Edit settings” earlier but I was wrong. When no repo is linked it is labeled
“Link site to Git”. Here is a screenshot to clarify:

I’m also not sure if you could instead be asking, “How to I enable auto-publishing again if I’ve locked
deploys?”

If that is the question, the answer can be found at the link below:

Manage deploys

Roll back, lock, cancel, skip, cleanup, or delete a deploy for your site, or use
environment variables to control the deploy environment.

Please do let us know if there are other questions.

brianjychan

May 2020

Does the unlinking + manual deploys method still allow Build Hooks to work? I want to only publish after a
certain step of my CI (deploying new serverless functions) passes. I really wish there was an easier
solution, but it seems that stopping auto publishing also disables Build Hooks, and then the build won’t
Skip to main content
automatically run

Currently I’m considering:

1. stopping auto-publishing, but continuing auto builds
2. From my CI environment, use env variables to parse what github commit hash is building
3. If the branch is master, use the netlify CLI / API to contact the netlify GET

/api/v1/sites/:site_id/deploys API to ﬁnd the commit_ref that matches

4. Use POST /api/v1/sites/:site_id/deploys/:deploy_id/restore to effective ‘restore’ aka

publish that desired commit

Will this work? Does anyone know a better way?

I wish there was an analogous feature to Build Hooks that was essentially a Publish Hook (make a POST
request to a URL to publish a build, while specifying parameters to specify which build)

luke

Support Engineer

May 2020

Hi, @brianjychan , if you are doing a build in some CI system you can skip building at Netlify and directly
deploy the locally built site to Netlify from the CI system itself.

This is done using manual deploys and the Netlify CLI tool:

Get started with Netlify CLI

Install our CLI (command line interface) and use it to run a local development
environment, deploy your site, manage environment variables, and more.

To summarize, you can install Netlify CLI as a build dependency in the CI system and when the checks
pass you can the CI script/system then executes netlify deploy --prod for the the “publish

directory” (as we call it at Netlify). If this is done you will know the version deployed exactly matches you
CI build because it is the version from the CI build.

Would that solution meet your requirements?

Can you make netlify wait for github CI to ﬁnish before starting its build?

chrisworman-pela

Jul 2020

Still seeing the Netlify check when opening a PR against the pelacase/pelacase-web repo in github. Is
there something else that I need to do to remove this?

Skip to main content

jen

Jul 2020

Hey @chrisworman-pela ,
Is this a protected branch? If so, you may have to remove the check on the GitHub side. Even though
these instructions are for enabling instead of disabling status checks, they will take you to the right place

in GitHub where you should be able to remove netlify/pelacase/deploy-preview:

Managing a branch protection rule - GitHub Docs

You can create a branch protection rule to enforce certain workﬂows for one or more
branches, such as requiring an approving review or passing status checks for all pull

requests merged into the protected branch.

Let us know if that works for you!

bigwoof91

bigwoof91:

Nov 2020

Same as Sstoney200 I want to disable automatic builds & deploys when a branch is merged to
master, and allow CI to call a webhook to trigger a build/deploy for the netlify site. Do I need to just
request for github to be unlinked from the netlify site?

If no, then please provide the recommended way to do this

Instead of unlinking my Github repo (i.e. asking about that in my comment

Maybe this helps someone
above), I ended up just doing:

// netlify.toml
[build]
ignore = "/bin/true"

Skip to main content

And calling a webhook from CI.

This isn’t ideal because although all automatic builds are cancelled (triggered as a result of a merge to
master , in my case)…

1. We can no longer manually deploy from the Netlify Site UI
2. the build log is still cluttered w/ “cancelled” builds
3. it’s also a misleading workaround which is unintuitive for my fellow engineers to follow and/or

duplicate in other projects.

This leads me to really want a clean way to conﬁgure “Active Builds” without automatically
building&deploying. I’m sure something like this is in the works, but wanted to just post this for posterity
and the Netlify team’s visibility…

bhagaban

Dec 2021

Please remove the Gitlab association for the following API key

4f91d854-1b29-4779-bc8f-9267d5f8f3ce

luke

Support Engineer

Dec 2021

Hi, @bhagaban . The workﬂow being repeated in this topic is unlinking repositories from sites. For this
workﬂow, we need the site API id, not the API key.

There are no sites with the API id you listed. You can ﬁnd the API id under “Site Name” > Settings >
General > Site information.

If you send us that id, we can unlink the repo. Note, this can also be done using the API. The Netlify CLI
tool makes calling the API easier and it can be done like so:

netlify api unlinkSiteRepo --data '{ "site_id": "1a997e22-11b7-44b7-945b-c062ef0

You would need to replace 1a997e22-11b7-44b7-945b-c062ef03c8bf in the command above with
the actual API id as found under “Site Name” > Settings > General > Site information. If you use Netlify
CLI you can unlink the repo without the support team’s assistance.

If you would prefer for us to unlink the repo, again, please let us know the API id (not the key) and we will
unlink it.

zehawki

May 2022

Hello Netlify folks - this is something I’d also like, but there’s got to be a better way than this round about
method of manually unlinking. Surely it would be simple to have the GUI set to “stop builds”, and still allow
Skip to main content

a speciﬁc webhook / API call to trigger. Eg a query param ?force_build=true (from Build hooks | Netlify
Docs).

This would allow us to self manage this stuff.

perry

May 2022

Hello, somehow this ﬂew a bit under the radar but we released the functionality to self-unlink via the UI in
late February of this year. You can now take care of things yourself via this URL:

https://app.netlify.com/sites/[YOUR SITE NAME]/settings/deploys under manage
repository:

Self-service unlink repository from site instance

Automatically bumped on Jul 26, 2022

carlos.hernandez

Aug 2022

Hello, I stumbled upon this thread as I was trying to block automatic deploys to both my production and
staging branches until CI passes but I don’t want to block Deploy Previews.
My approach was similar to option 2, stop auto publishing and triggering a deploy with either a hook or the
CLI from my CI pipeline but both seem to fail because of the lock; using the CI give a prompt to unlock
deployments but I’m unable to respond to it in a CI context.

Any suggestions on how this could be accomplished?

Skip to main content

hrishikesh

Support Engineer

Aug 2022

Unless you’re deploying using netlify deploy --prod this should work ﬁne. --prod is for
production deploys.

carlos.hernandez

Aug 2022

This was done with a --prod ﬂag, that’s what I want to deploy via the CLI or API only after the CI
passes

luke

Support Engineer

Aug 2022

One solution would be to use the CLI in the following way. If all CI tests pass:

1. The CLI is used to make an API call to enable auto-publishing.
2. The manual deploy is made using netlify deploy --prod .

3. The CLI is used to make an API call to disable auto-publishing again.

Would that solution work for you? If so, please let us know and we’ll send examples of how to use the CLI
to make these changes (steps 1 and 3 above).

carlos.hernandez

Aug 2022

I tried that approach but to lock / un-lock deploys via de API, I needed to either save the previous
deploy id or ﬁnd it every time since the endpoint requests it.
We ended up disabling builds completely and building on the CI to then deploy with the CLI with a mix of
--prod and --alias ﬂags based on the different cases

[Support Guide] How do I access private repositories in the

build environment?

support-guide

Dennis

Last reviewed: October 2024

Apr 2019

The link from your repository to our service only authenticates us against the “main” repo that you ﬁrst

conﬁgured, and won’t automatically allow access to submodules even if they also belong to you and
you’ve granted Netlify access to those repositories.

In case your submodule is public, you can change the URI schema for it to start with https:// , and it

should work without further adjustment (so, in .gitmodules , change git@github.com… to
https://github.com/… )

If you have a private submodule, you’ll need to grant permissions for our build system to access your
private submodule. Since we can link only ONE deploy key to each site, and need to have a separate key

for each site, you’ll need to do the following:

1. Generate your deploy key (a site-speciﬁc SSH key) following these instructions

2. Assign your deploy key as a read-only deploy key in your repository settings at GitHub, which can

be found here: https://github.com/<your github account>/<your repository
name>/settings/keys .

3. Once it’s in place, when we check out the ﬁrst repo to build, we’ll fetch the submodule with this

deploy key and this will work!

4. You can use this workﬂow with multiple private submodules attached to the same repository, but that
   does take some extra work since GitHub does not allow Deploy Keys to be used in multiple places.
   You’ll have to instead add them to a user (perhaps you? or maybe a robot-account that you create
   on GitHub) that has access to all repos.

If you want to access private repositories not conﬁgured as a submodule, it can be a bit of a challenge in
the build environment! We do have git and ssh in the build-image, so the tools are there. What’s missing
is any authentication credentials at all - we don’t even have permission to fetch the same repo we are
building from within the build environment. So, you’ll need to supply whatever you need to access
that repository somehow.

There are three ways we know of to do it (and probably a thousand that we do not, feel free to tell us
about different ways to do this). The best way to do this requires support of your package manager and
Git provider, so it may not be an option depending on your toolchain. All of these options include storing
access tokens in your repository or accessing them via secrets stored there.
Skip to main content

If you think that could work, there are a couple of ways to get that info into our build environment:

1. If your dependency manager (this works with npm at least) supports it, and your package.json is
   securely stored, you can add that dependency using a GitHub or GitLab access token like this:
   git+https://<github_token>:x-oauth-basic@github.com/<user>/<repo>.git (GitLab
   also documents this). If you use BitBucket, you can to use an app password in the same way.
   Note that you can instead choose to not save the token to git, but use it directly from the command
   line during build if you keep that dependency out of your main package.json and instead set an
   environment variable like $GIT_TOKEN  in the Build & Deploy settings for a site, and using a step in
your build process like:  npm install git+https://${GIT_TOKEN}:x-oauth-

basic@github.com/user/repo.git

2. Simplest, but not recommended, is to have the ssh private key as part of your repository. Then you

can just use it natively (eg if you have /.ssh/id_dsa and it is password-less, ssh will just use it
automatically - when used with or without git). This isn’t recommended, because you may have a lot
of people with access to your repository that can now access the private dependency!

3. Instead, you can add some access token to the “Build Environment” section of the settings for your
   site. This restricts access to only those who can see your Netlify account settings, rather than all
   who can see your repository/source code. This could be the contents of the SSH key (remember,
   the ssh private key is multi-line text and formatting-sensitive). It might be easier to pull down the key
   from a remote server using curl:

curl -dump https://username:${PASSWORD}@hostname/sshkey > ~/.ssh/id_dsa

To use this last trick successfully, you should realize that your build command can be anything you want
that can run on a Linux host. See this forums post about debugging your site and this blog post for more
info about how to tell what is available and test things out locally.

One of my teammates gave a better write-up of how to use an SSH key yourself in this article that
might also be useful.

Finally, you can create your own deploy key for a site or replace the existing one, but it is a bit
complicated. The workﬂow described in this article can be used for existing sites as well: [Support
Guide] Linking a repository via API.

[Support Guide] Using an SSH key via environment variable during build

Access private, third-party repo in build environment

SSH Key for Private Submodule

Could not read from remote repository

Clone repo without checking out submodules

46 more

Related topics
Skip to main content

Topic

Replies

Views

Activity

SSH Key for Private Submodule
building

Accessing Multiple Private Repositories
deployment

authentication

Github 2FA + Private Submodule + Deploy Keys Won’t Work
building

Generate a deploy key for private submodules on Netlify now in the
UI

updates

Private submodules, SSH keys and Host key veriﬁcation failed

deployment

git

2

6

1

3

1

1.7k

Feb 2020

2.8k

Sep 2020

1.6k

Apr 2020

2.9k

May 2021

2.5k

Mar 2021

[Support Guide] Using an SSH key via environment variable

during build

support-guide

fool

Jul 2019

Last checked by Netlify Support Team: October 2024

Some workﬂows require use of an SSH private key during build - for instance, logging in to a server to

restart your backend, or using git clone on a private repo during build. There are better ways to
accomplish this goal for most use cases, but in case you choose to do that, below is an approach that can
work.

First, create an ssh key and add the public key (shorter one) to your service (e.g. on your GitHub repo
settings, or in ~/.ssh/authorized_keys on your server)

Then, take the private key (longer one) and transform it into something suitable for the build environment.
This means that it wouldn’t have carriage returns in it, so I’ve edited the key I use with this pattern, in my

Netlify Build Environment Variables on the Build & Deploy settings page, as shown in this screenshot:

There, I conﬁgure my SSH_KEY variable, setting it to a value like this:

-----BEGIN RSA PRIVATE KEY-----\_MIIEpAIBAAKCAQEAoCGgoxalJiAF5WKQ...

You can see your own key will look more like:

-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAoCGgoxalJiAF5WKQ...

So you can see, I’ve just replaced carriage returns with underscores. Then I use this sequence as part of
my build command:

mkdir -p ~/.ssh && echo -e "${SSH*KEY//*/\\n}" > ~/.ssh/id_rsa && chmod og-rwx

~/.ssh/id_rsa

Now you’ll have a mostly-usable SSH key in your build environment. I say “mostly” since there are still
Skip to main content
some things to consider:

You’ll need to set these settings for git (which you would & can use manually if you ran ssh
interactively): -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no . This
stack overﬂow article shows how to apply them to the git conﬁg:
https://stackoverﬂow.com/questions/7772190/passing-ssh-options-to-git-clone
You’ll need to do this BEFORE YOUR BUILD STARTS and BEFORE YOU NEED THE KEY. So -
this may be a challenge considering you might have a package.json that we try to use with npm
install before the build runs. You’ll have to do something to prevent us from running npm

install , such as not having a package.json ﬁle in the root of your repo, or make that package
optional - and then install it later, AFTER you’ve run those build commands.

I don’t have a great demonstration of that use pattern to share - if you require the package before your

build starts, the submodule route mentioned in this article (about Hugo, but generally applicable) outlines
how this process can happen at clone time rather than post-dependency-installation time. Even without a
speciﬁc example, hopefully this provides some ideas on how you can approach this process.

Solved by parkan in post #22

why not just base64 encode the whole thing? this is a robust approach that doesn’t rely on manual
string manipulation, and you can decode right into a buffer, which many crypto libraries expect (yes,
it’s a bit silly to encode something that’s already encoded)

Access private, third-party repo in build environment

Long Environment Variable with line breaks (\n)

I'm not sure that I "belong" on Netlify, I just want to build and deploy to my droplet

Whitelist netlify build servers

One more env issue

12 more

hongaar

Aug 2019

Just bumped into this issue and was able to ﬁnd a solution using this article. I created this shell script to
execute the necessary steps:

#!/usr/bin/env bash

# Check if we're running in a Netlify environment

# See https://www.netlify.com/docs/continuous-deployment/#environment-variables

if [ ! -z "${DEPLOY_PRIME_URL}" ]; then

    # Init .ssh dir and expand $SSH_KEY
    mkdir -p ~/.ssh
    echo -e "${SSH_KEY//_/\\n}" > ~/.ssh/id_rsa
    chmod og-rwx ~/.ssh/id_rsa

Skip to main content

# Uncomment to debug # ls -la ~/.ssh # cat ~/.ssh/id_rsa

    # Add host keys, comment out if not needed
    ssh-keyscan -H github.com >> ~/.ssh/known_hosts
    ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts

fi;

You can trigger the script using the npm “preinstall” hook:

{
...
"scripts": {
"preinstall": "bash netlify-setup.sh",
}
}

perry

thank you for sharing!

benwinding

Thanks @hongaar !! Great ﬁx!

parkan

Aug 2019

Apr 2020

Dec 2020

why not just base64 encode the whole thing? this is a robust approach that doesn’t rely on manual string
manipulation, and you can decode right into a buffer, which many crypto libraries expect (yes, it’s a bit silly
to encode something that’s already encoded)

fool

Dec 2020

As long as it doesn’t get too long, nothing wrong with doing it that way (AWS lambda limits environment
variables to 4kbyte total length and a non-encoded SSH key is already pretty long). I am using the initial
implementation on a site that doesn’t use node to build, so I did not have an “easy” way to encode/decode

except the shell builtins, when I made what I made

klee

Jan 2021

I am not sure if I followed the steps correctly (new to this). My RSA private key is 3.2KB in size. In Netlify
Skip to main content
UI, I added the environmental variable: SSH_KEY as the key and the private key as the value - the private

key value is also surrounded by quotes. In netlify.toml I did this:
[build]
command = “npm install && npm run build && mkdir -p ~/.ssh && echo -e “${SSH*KEY//*/\n}” >
~/.ssh/id_rsa && chmod og-rwx ~/.ssh/id_rsa”

I still got the deploy error: Invalid AWS Lambda parameters. Reserved keys used in this
request . Please let me know in steps what to do.

fool

Jan 2021

Could you tell us your deploy ID? There are a few reasons you could get that message:

you could be trying to use $AWS*SECRET_KEY or $AWS*(some other variable name which

we also reserve)

But it is likely that your key is just too long as we have an open bug around that error message
being delivered for “too long environment” right now, too - how long is it after you base64 encode it?
(https://www.base64encode.org/ is the tool I use to test, but do watch out for posting any sensitive

information to a random website!)

J-Krush

Feb 2021

Thanks for all the tips above. I’m still having some trouble and wondering if someone has any ideas for
this:

I am using an express server wrapped in serverless-http attempting to deploy a function on
Netlify. It was working beautifully until I added authentication with Auth0, which was accomplished using
some express JWT middleware. Now whenever I try to hit my endpoint, I get the following errors:

On the client:

"error": "Unexpected token < in JSON at position 0"

And in the netlify function logs:

UnauthorizedError: error:0909006C:PEM routines:get_name:no start line
at /var/task/src/node_modules/express-jwt/lib/index.js:105:22

I have pretty much narrowed the issue down to my SSH_KEY certiﬁcate in the environment variable

(reason being I can run the function locally with no problems). It is less than 1kb, and my other variables
are small so I don’t think I’m running into the 4kb limit on lambda.

I have implemented the solution from @hongaar above using “underscores instead of carriage returns”,
the bash script and the npm preinstall hook, but I’m still getting the same error. I believe my issue is
around what @fool was saying in the original post: I need to run the script BEFORE the build starts…
and my log is showing this (my build command is running and then the bash script is running:
Skip to main content

The certiﬁcate looks good though! The script seems to be working, I think it’s just not running at the right
time… Am I in the right ballpark? Any suggestions?

J-Krush

Feb 2021

This is the way. Thanks @parkan ! I thought it was kinda silly too, but encoding to base64 produces a

simple string with no special characters, which Netlify seems to prefer

Also no need for the bash scripts and build conﬁg. Just decode in your server:

Buffer.from(process.env.SSH_KEY, 'base64').toString('utf8')

K_Fidalgo

May 2023

This worked for me too! I was having trouble for two days and came across this post. I encoded the
private key to Base64, added that to my environment variables, and then prior to using it in my code I
decoded it back to utf8.

Buffer.from('Key Goes Here').toString('base64');

SamO Regular

May 2023

thanks for sharing this with the community

Related topics

Topic

One more env issue
lambda-functions

building

environment-vars

Skip to main content

Replies

Views

Activity

1

1.4k

Feb 2020

Topic

Replies

Views

Activity

Netlify SSH Deploy key private key location
git
deployment

environment-vars

authentication

How to hide environment variable in a ﬁle base conﬁguration

environment-vars

Using environment variables
building

deployment

Preivate repo deploy key + Docker builds
git
building

netlify-newbie

11

2.7k

Feb 2021

3

8

4

3.1k

Jun 2020

2.3k

Jan 2021

518

Mar 2020

[Support Guide] Conditional build/deploy behavior for

context / branch on Netlify

deployment

support-guide

fool

Feb 2019

Last reviewed by Netlify Support Staff: August 2023

Ever wondered if there is a way to use conditional build settings based on context or branch name for

deploys from git? How about deploys NOT from git?

TL;DR: Yes, for git based builds you have a lot of control! There are several ways to accomplish this on
Netlify’s build network.

To start with let’s talk about how we differentiate build types and deﬁne some terminology:

Terminology

All Netlify sites are deployed to our CDN and you can see a list of a site’s deployments on the Deploys
page which is linked in the header of all the pages in the admin UI for your site. However, the advice I’ll
give around changing build behavior applies only to builds. Builds by this deﬁnition are only created by
Netlify’s build network from your source code; our advice about builds does not apply to manual deploys
via API, CLI, or drag and drop.

Next it is important to understand that each build has a context . That context is intended to describe
“what kind of build it is”. Typical values would be:

1. production (for commits to, or builds from, your “main” branch that is published at the site URL

such as yoursite.com or happy-scientist-12345.netlify.com)

2. deploy-preview (for Pull Requests)
3. branch-deploy (default for all non-production branches)
4. some-speciﬁc-branch (you can set as many of these as you’d like. Perhaps staging?)

Contexts 1 and 2 exist for each build regardless of whether you manually set them. This document
explains the situation in more detail.

Branch-speciﬁc behavior

So now that we’ve got our terms deﬁned, let’s talk about how to accomplish the goal of “special builds for
special circumstances”. You’d like your build for staging to use a staging API endpoint, and your build for

production to use the production API endpoint. This is what deploy contexts were made for
a netlify.toml ﬁle (see this doc for details) with the following settings:

You set up

Skip to main content

[context.production.environment]
API_ENDPOINT = "https://production.yourservice.net"

[context.staging.environment]
API_ENDPOINT = "https://staging.yourservice.net"`

# no API server exists for other branches, but code will still want a URL here so

[context.branch-deploy.environment]
API_ENDPOINT = "https://invalid"

You can also set a bunch of other things per context - build command, directory to start the build from, etc

- check out this doc for all the possibilities.

Password protecting subsets of your content on a site

One frequently requested workﬂow is “password protect my non-production deploys”. You can learn how
to create functional protection for deploy previews in this article. Please be aware that this will apply
to only future deploy previews based on your conﬁguration. The only way to retroactively password
protect deploys that didn't have this set is to password protect your entire site from the Access Control
section of your Settings, but watch out - this affects the production branch too!

But I don’t deploy via git

No problem! As long as we build your site - perhaps via a build hook - you can still use a conditional
workﬂow. Build Hooks are always assigned to a branch, so you CAN still key off of context if you’d like.
Or, you can key off of which hook ﬁled, or what it sent! We expose the webhook’s title, URL, and body that
is HTTP POST ed to our service via environment variables during build, as described in more detail in
this documentation.

If you build your site locally, you can of course build something similar for your local use, but we’ll leave

that workﬂow to you to create

TOML different headers for different contexts

Branch speciﬁc environment variables on Netlify

Does search engines like google index unﬁnished .netlify.app sites?

[Support Guide] Access control options for your Netlify sites

[Support Guide] Tips & Tricks for browsing different deploys of the same site

10 more

Unlisted on Mar 19, 2024

Archived on Mar 19, 2024
Skip to main content

Related topics

Topic

Branch speciﬁc environment variables on Netlify

git

Changing deploy preview build settings based on branches used in
pull request

building

deploy-previews

Context-based build plugin conﬁg
deployment

building

Is it possible to manually build “remotely”?
netlify-newbie
deployment

netlify-cli

building

Select context during cli deploy

deployment

netlify-cli

Replies

Views

Activity

1

7

5

5

1

1.5k

Mar 2021

763

Jun 2021

2.9k

May 2021

728

Dec 2020

428

Dec 2021

[Support Guide] “…does not exist or you do not have

permission” with failing builds

git

support-guide

Dennis

Checked by Netlify Support October 2024

Apr 2019

When you see the following error, it can point to your repository not being set up to allow us to pull your

source code:

git ref refs/heads/master does not exist or you do not have permission

There are a couple of possible causes: one reason would be if someone has removed the deploy key
from your repository, which we require to fetch your source code to build. Another possibility would be

your repository at your git provider had become un-linked from our service.

The easiest way to repair is to:

start on the ‘build and deploy settings’ page, near the top where the repository information is
(Netlify)
choose “edit settings”
then click on “link to a different repository”

Even if it is the same repository, this should ﬁx the linkage and allow automatic deploys to work again.

Here are some git speciﬁc docs that may help: Repository permissions and linking | Netlify Docs

That should help ﬁx most cases but if not, start a new topic and link this thread!

Deploy job which used to work before suddenly started to fail

Netlify/API/Rails Does not authorize github branch

Github tag (release) branch deploy has stopped working?

No STACKBIT_API_KEY environment variable set

[Support Guide] Compiled Build and Deploy Resources -- start here!

2 more

hrishikesh

Support Engineer

Last reviewed in August 2021.
Skip to main content

Aug 2021

Related topics

Topic

Deploy is not building from GitHub Push
deployment

git

Replies

Views

Activity

7

3.7k

Apr 2020

[Support Guide] Reconnecting your repository to your Netlify site
support-guide

repo_linking

10

5.1k

Dec 2023

Missing “Master” Branch to Deploy
building

Netlify Github Orgs unavailable even after adequate permissions
granted

deployment

git

Import an existing project from a Git repository - Not reading my
repositories
deployment

netlify-newbie

6

2

1

604

Jul 2023

507

Nov 2020

493

Apr 2023

[Support Guide] My site deploy fails unless Netlify’s build

cache is cleared

deployment

building

support-guide

fool

Aug 2019

Last reviewed by Netlify Support - October, 2024

Netlify builds are highly conﬁgurable, but you may encounter some common build problem scenarios,

which we describe in depth in these two articles:

[Support Guide] Debugging Netlify site builds
[Support Guide] Frequently encountered problems during builds

However, there is an edge case that isn’t mentioned that deserves special treatment: Your build fails every
time, UNLESS you manually click “Trigger deploy” > “Clear cache and deploy site” on the deploy listings
page or “Options” > “Clear cache and retry deploy” within a speciﬁc deploy. This likely indicates another
root cause, for example:

1. You have committed node_modules to your repo which is like committing your kitchen sink. Maybe
   the dishes are all in there - but they might be dirty and unusable by us a second time. This article
   has more details about why this is an antipattern (to say that a different way: don’t do it!).

2. Your dependencies have binary components, which need to be rebuilt for some reason. For

instance, if the version of Node.js we use to build changes, any binary modules built against the old
version are unlikely to work with the new version - BUT we also may not rebuild them if they are
cached already!

3. We key off seeing package.json OR yarn.lock so having both is an antipattern - we won’t run

both for you automatically (see the logic we use in the build script for more details).

4. You manually manipulate your node_modules directory in some way during install - and that can

corrupt the node module cache which we store and attempt to reuse. This is not generally regarded
as a good practice and should be avoided for optimal results in our continuous deployment
environment.

5. If you are using yarn workspaces or a monorepo please consult the appropriate documentation

(linked to in this sentence).

6. Fairly rare but worth mentioning: You have a package.json in your repo root, but you are building

a subdirectory of your repo and have NOT appropriately set the base directory in your build
settings. That can lead to some confusing caching situations since we’ll only sometimes use that
package.json (when there is nocache).

If you are still having issues and neither the articles linked at the top, nor these tips are applicable, let us

know by posting a new topic, describing your speciﬁc situation in detail.

Skip to main content

Solved by raae in post #17

I found the answer to my problem here: Postinstall script fails using netlify-lambda to install
function dependencies · Issue #227 · netlify/netlify-lambda · GitHub. It seems using netlify-
lambda install in postinstall also triggers this problem. It should be moved to prebuild as a work
arround.

Deploy only works if cache is cleared

Build failures on every push except pass on cache rebuild

Builds always fail until clearing cache and re-trying

[Support Guide] Frequently encountered problems during builds

Every build fails until we "clear cache and retry"

20 more

tjperry07

Apr 2021

Another ﬁx is to update your package.json scripts to run in order and wait for one to ﬁnish before moving
to another.

& as in eleventy & npm run tailwind:build - means run both eleventy and npm run
tailwind:build at the same time. I don’t care about which script ﬁnishes ﬁrst just run them.

&& as in eleventy && npm run tailwind:build run eleventy wait for eleventy to ﬁnish, then
run npm run tailwind:build

raae

May 2021

I found the answer to my problem here: Postinstall script fails using netlify-lambda to install function
dependencies · Issue #227 · netlify/netlify-lambda · GitHub.

It seems using netlify-lambda install in postinstall also triggers this problem. It should be

moved to prebuild as a work arround.

Related topics

Topic

Site deploy fails unless Netlify’s build cache is cleared

deployment

building

Skip to main content

Replies

Views

Activity

3

2.2k

Apr 2020

Topic

Replies

Views

Activity

My site deploy fails unless Netlify’s build cache is cleared
(Microsoft Rush monorepo)
building

deployment

Build success only after re deploy site with clear cache

building

Build is failing on push but works on “Clean cache and build”
deployment

building

3

1

2

2.5k

Nov 2019

1.4k

Sep 2020

1.4k

Jan 2021

Builds always fail until clearing cache and re-trying

deployment

building

12

6.0k

May 2020

[Support Guide] Netlify app builds locally but fails on deploy

(case sensitivity)

building

support-guide

perry

Mar 2020

Last updated by Netlify Support: October 2024

Are you struggling to understand why your project runs locally but errors out with missing ﬁles or logs that

point toward issues with case when you try and build on Netlify? You are not alone. Often, case (as in:
UPPERCASE or lowercase letters in ﬁlenames or paths) can cause problems. Here is a guide to
understanding how case sensitivity issues present themselves, why they arise, and how you can ﬁx them!

1. Errors you might see

Case sensitivity issues can be frustrating to debug because sometimes you’ll receive error messages
letting you know that ﬁles could not be found when they are clearly present during the build process. See

this post for a great example:

Netlify deployment is failing despite all scripts running perfectly ﬁne locally

I’m having issues with one of my sites. The build seems to be failing on an import line in one of my JS
ﬁles, but running all the same commands locally, I don’t have any issues… I don’t know how to debug
why Netlify is failing. The site is built using Svelte and Sapper, and I was initially getting the following
error: ‘svelte-icons/fa/FAPenFancy.svelte’ is imported by src/components/features.js, but could not be
resolved – treating it as an external dependency svelte-icons is a package that …

Sometimes you might just have a failing build without any useful error messaging as it depends on which
ﬁle has the issue.

2. Why does this happen?

If you work on Windows or OSX (mac), you are working on a case-insensitive system. The ﬁle system
used in Netlify builds is case sensitive, while your local environment is not. Unfortunately, the error
messages that result may not clearly indicate this!

Meaning: if your code includes a ﬁle or reference to a ﬁle like jQuery/jquery.js — the Netlify build
may fail due to the mixed case ﬁlename. This issue can be present with ANY ﬁle that is an important part
of your project, including, but not limited to:

entry-point application ﬁles like App.js or Main.js (not the same as app.js or main.js)
partials, modules, imports, templates
dependencies, packages

Skip to main content

font ﬁles
image, css and json ﬁles
netlify.toml, \_redirects, package.json, Gemﬁle or any other conﬁg or settings ﬁles
…anything!

This issue also happens regardless of where the case sensitivity occurs. To be really clear, during the
build step:

somefile.js != someFile.js != SomeFile.js != SOMEFILE.js != sOmEfIlE.js

We strongly recommend that you pay very close attention to how you use case from the very beginning in
your project, and standardize how you use case throughout so you don’t have problems during the build
step on Netlify.

3. How can I ﬁx these problems?

If you haven’t committed your ﬁles to version control (we are assuming you are using Git) then it is
sufﬁcient to simply rename the ﬁle(s) in question and the problem should ﬁx itself.

That said, most people realize they are having a case issue when they try and build on Netlify, as the
problem doesn’t occur locally. This almost always means that the ﬁle(s) have been committed to Git and

pushed to a provider such as GitHub. Simply renaming the ﬁle and re-committing and pushing it does not
generally work because Git’s default setting is to ignore case, and so those changes aren’t always

registered.

This thread on Stack Overﬂow has lots of useful approaches on how to deal with this. We have also
found that the following steps will do the trick:

1. deleting the ﬁle
2. committing and pushing to GitHub

3. re-creating the ﬁle
4. adding, committing, pushing to GitHub

As soon as the case issue is resolved, you should see any problems related to this vanish and enjoy

smooth, problem free builds on our platform

If you are still having issues after ﬁxing the case related issues, this Support Guide contains many other
troubleshooting steps for common concerns! Good luck & please comment below if you have additional
thoughts!

Solved by kennyfully88 in post #29

I can conﬁrm that this worked for me, as I was a rebel and changed the entire naming convention of

my vue related project. I was nearly in tears trying to get things to work in production. Thank you very
much for this. May God bless you.

Skip to main content

Build fails on Netlify, works locally

Module not found: Error: Can't resolve

Gatsby site deploy failed

Netlify build failed with webpack error - css-syntax-error (unknown word)

[Support Guide] I’ve deployed my site but I still see "Page not found”

163 more

Split this topic on May 29, 2020

2 posts were merged into an existing topic: Hugo Partial Not Rendering Once Deployed to Netlify

Automatically bumped on Jul 6, 2020

bsgreenb

Oct 2020

If you’re using TypeScript, would recommend setting this in your tsconﬁg.json:

“forceConsistentCasingInFileNames”: true,

AntonioRiccelli

Mar 2022

Hey @perry ,
Thank you for this, as it clariﬁes some doubts. I seem to have stumbled upon this problem for the ﬁrst
time.
What I don’t understand is, why does it only seem to happen on certain occasions? For example, when
deploying a speciﬁc app, and not another one, even though they share the same naming conventions?

perry

hi antonio,

Mar 2022

all apps should have the same restrictions - i.e our systems are always case sensitive, and mac/windows
operating systems will always be insensitive. therefore, the best option is to choose one naming
convention and stick with it. making everything lowercase seems to work for most people!

thinkdigitalzw

Apr 2022

Hi, so there are many solutions to this case sensitivity problem with how github handles it.

In my case I had changed the ﬁlename casing convention from uppercase to lowercase. I do believe that
git is able to track the change but however this command
Skip to main content
git config core.ignorecase false dictates how git operates behind the scenes

In my case I ran the command and git suddenly had lots of ﬁles to track labelled untracked.

I then hit git add. , then git commit and ran my build on netlify one more time.

Then all errros now displayed could be traced e.g

Module not found: Can't resolve './Components/ProductRightSide' in

'/opt/build/repo/components/products and ﬁxed such that git was able to track and implement
the changes successfully.

Its quite a work around and a ﬁnger nail away from frustration but trust me this will surely work.

PS : after ﬁxing your issue you may want to run the command

git config core.ignorecase true to restore how git works with case sensitivity.

Also note git config core.ignorecase false has issues with other ﬁle name extensions so you
may want to watch out , do it if you know what you’re doing and sure of it.

Here’s the stack overﬂow thread I got my solution from

IamSoPrada

May 2022

Thanks a lot! Spent 2 days trying to understand what’s the problem was. I appreciate your solution.

hillary

Technical Program Manager

May 2022

Glad this was helpful for you, @IamSoPrada . Happy building

Automatically bumped on Jul 29, 2022

slubz

Aug 2022

I spent a lot of time trying to ﬁx it but it still doesn’t work Example:
“https://example.com/home/ExaMpLe.html” but when i access the link, the website link automatically
lowercase like :“https://example.com/home/exanple.html” please someone help me, I’m a newbie and
please explain in short and easy to understand.

hrishikesh

Support Engineer

Aug 2022

The above post is not related to your query. We’re talking about case sensitivity during builds. You’re
asking about case sensitivity during site serving. Netlify normalises all URLs to lowercase, so what you’re
looking for is not possible.

Skip to main content

Disallow case-insensitive path names

Automatically bumped on Oct 15, 2022

kennyfully88

Dec 2022

I can conﬁrm that this worked for me, as I was a rebel and changed the entire naming convention of my
vue related project. I was nearly in tears trying to get things to work in production. Thank you very much
for this. May God bless you.

SamO Regular

Dec 2022

Hi @kennyfully88
for you. We appreciate the feedback.

, Welcome to the forums! Thanks for coming back and letting us know what worked

DavonW

This worked for me. Thanks a bunch!

c0ncentus

I feel depressed how netlify made thing a lot complex when comes simplicity …
I think about to change now …

mrdo

Jan 2023

Mar 2023

Jul 2023

Hello.
I am having trouble deploying directly from my github repository. I deploy the same project manually and it
works perfectly ﬁne, without any complications. Is the case sensitivity only tied to deploying from github?

SamO Regular

Hey there

Jul 2023

Welcome to the Netlify Forums and thanks so much for reaching out! Have you tried relinking/unlinking
your repo? You should be able to unlink your github repo in your UI now,.

Can you try the following steps and see ﬁ that helps:

1. Unlink the account here: Netlify App .
2. Log out of the wrong github account on the github site
3. Log in to the correct github account
4. Once active in the correct account, link again

Skip to main content
Let me know if that works!

cristoffer85

I can conﬁrm this also works today.

11d

I did it the tedious way of renaming ever folder+ﬁle+import in ﬁles (remember to check the ﬁle
names+imports in index.html and main.js etc as well)

to Main2.jsx, Router2.jsx, RandomPage2.jsx etc → commit → push to github repo and then back
to main.jsx, router.jsx, randompage.jsx → commit push again etc. All clicked in and worked nicely in just
1.13s build time on free tier.

Related topics

Topic

Command failed with exit code 1: npm run build (https://ntl.fyi/exit-
code-1) - April 2023

deployment

netlify-newbie

Error importing components during build

deployment

building

HELP Works locally, worked on Netlify but suddenly stoppen

deployment

Webpack react js in netlify

deployment

Cannot ﬁnd ﬁle problem

deployment

building

netlify-newbie

Replies

Views

Activity

1

3

3

7

2

697

Apr 2023

456

Nov 2023

1.5k

Apr 2020

1.8k

May 2020

3.2k

Nov 2020

[Support Guide] What can I do if my build fails for memory-
overallocation-related errors?

building

support-guide

fool

Last updated by Netlify Support: October 2024

Jul 2021

Are you struggling to get your build working? Most build errors are caused by problems in code or data,

and for those errors, our best guide / general starting place for debugging build troubles is this one:

[Support Guide] Debugging Netlify site builds

Last reviewed by Netlify Support - October 2024 Note: This article is only about builds within Netlify’s
Continuous Integration (CI) environment, as triggered from git commits or from incoming build
webhooks. You can learn more in depth about how Netlify builds your site in this article about how
our build bots build sites. Some background There are a fair number of reasons that a build could

fail in Netlify’s CI environment, even if building works locally. Testing locally is always the place …

But, sometimes your build is working ﬁne and suddenly ends with some inscrutable errors that don’t seem
to be “about” your code or site even. Perhaps you see an error message like this in your builds?

2:28:35 PM: <--- Last few GCs --->
2:28:35 PM: [1541:0x3bb00a0] 154094 ms: Mark-sweep 1351.5 (1425.5) -> 1350.8 (1
2:28:35 PM: <--- JS stacktrace --->
2:28:35 PM: ==== JS stack trace =========================================
2:28:35 PM: 0: ExitFrame [pc: 0x114d680dbe1d]
2:28:35 PM: Security context: 0x369735b1e6e9 <JSObject>
2:28:35 PM: 1: addMappingWithCode [0x2a57bba6f771] [/opt/build/repo/node_modu
2:28:35 PM: 2: /_ anonymous _/ [0x3d024199afc9] [/opt/build/repo/node_modul..
2:28:35 PM: FATAL ERROR: Ineffective mark-compacts near heap limit Allocation fai
2:28:35 PM: 1: 0x8f9d10 node::Abort() [node]
2:28:35 PM: 2: 0x8f9d5c [node]
2:28:35 PM: 3: 0xaffd0e v8::Utils::ReportOOMFailure(v8::internal::Isolate\*, char
2:28:35 PM: 4: 0xafff44 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::
2:28:35 PM: 5: 0xef4152 [node]
2:28:35 PM: 6: 0xef4258 v8::internal::Heap::CheckIneffectiveMarkCompact(unsigned
2:28:35 PM: 7: 0xf00332 v8::internal::Heap::PerformGarbageCollection(v8::interna
2:28:35 PM: 8: 0xf00c64 v8::internal::Heap::CollectGarbage(v8::internal::Allocat
2:28:35 PM: 9: 0xf038d1 v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::
2:28:35 PM: 10: 0xeccd54 v8::internal::Factory::NewFillerObject(int, bool, v8::in
2:28:35 PM: 11: 0x116cede v8::internal::Runtime_AllocateInNewSpace(int, v8::inter
2:28:35 PM: 12: 0x114d680dbe1d
2:28:42 PM: /usr/local/bin/build: line 34: 1541 Aborted

Skip to main content

or, perhaps, your build is chugging along and suddenly ends with a “Killed” log message:

10:14:05 AM: /opt/build-bin/build: line 77: 1351 Killed [... details about the b

These are both signs that your build attempted to allocate more memory than is available in our build
system. This article describes the details of what is allocated to each build, for your reference. So
what can you do if you’re seeing something like the above?

1. Improve your build performance.

We ﬁnd that Gatsby is the site generator which primarily runs into this problem, though it is possible
in any build pipeline. So if you do use Gatsby and see this, please start out by reading these two
articles about improving Gatsby build performance:

5 Optimizations to Get Faster Gatsby Builds Today

Gatsby is a powerful tool for creating web sites and apps. Learn how to
optimize your builds to be as fast as your website with these Gatsby build

optimization tips.

and

Resolving Out-of-Memory Issues | Gatsby

Occasionally larger Gatsby sites, or moderately-sized sites with unusual
characteristics, run into out-of memory errors during gatsby build…

Those articles have guidance on some pitfalls in commonly used Gatsby conﬁgs and suggestions for
working around them.

2. Evaluate if you need to scale simultaneous builds.

Have a huge site and just need it to work? We do have a High Performance Builds, and we’ll be
happy to connect you to our sales team for a discussion of pricing, which is custom for every use
case and can scale to dozens of simultaneous builds. There’s a bit more detail on build environment
size in the ﬁrst paragraph of this section of this other guide

3. Adjust how Node.js runs.

You can try to adjust how Node.js runs, speciﬁcally adjusting the stack size. Customers have had
success with various different stack sizes, like the ones described in this stack overﬂow post. This
may mean changing a build command like

npm run build to ensure that its scripts, instead of running subprocesses like gatsby build
instead run something like:

Skip to main content

node --max-old-space-size=4096 gatsby build , or alternatively (should have same result),
set a $NODE_OPTIONS environment variable to something like --max-old-space-size=4096 .

You can try proﬁling your build to see what portion of it might overuse memory. One very relevant
way to do this is using the instructions for running our build image locally and constraining the
memory Docker has so you can ﬁgure out how much is needed and try to reduce. Within the docker
image, you can use the workﬂow described in this article to actually do the proﬁling.

In case you run parallel workers to complete your build - consider not doing that, or constraining
your CPU usage somehow. In our default build environment, there’s a limited number of CPU’s
available (varies based on account, see this doc for more details - so running more parallel
workers than that will just increase memory contention without increasing performance. You may
ﬁnd the guidance here helpful in case you use Gatsby: Resolving Out-of-Memory Issues | Gatsby

This advice won’t solve every problem but it has worked to solve most of the ones we’ve worked with. If
this didn’t help you, please feel free to post a followup question describing the results of the experiments
you attempted from the above list, so we can best advise you further.

Good luck!

Site wont deploy for a few days, seeing out-of-memory errors. What can I do?

Build.command failed, exit code 137 with seemingly no error message

Deploy Keeps failing despite trying out all the solutions on forum

Failed to minify the bundle. Error from Terser: Call retries were exceeded

[Support Guide] Compiled Build and Deploy Resources -- start here!

29 more

Automatically bumped on Sep 11, 2021

Automatically bumped on Oct 31, 2021

Automatically bumped on Dec 20, 2021

Automatically bumped on Feb 13, 2022

Automatically bumped on Apr 11, 2022

Automatically bumped on Jun 13, 2022

Automatically bumped on Aug 16, 2022

Automatically bumped on Oct 22, 2022

Skip to main content

Automatically bumped on Dec 28, 2022

Automatically bumped on Mar 6, 2023

Automatically bumped on May 12, 2023

Automatically bumped on Jul 19, 2023

Automatically bumped on Sep 25, 2023

Automatically bumped on Nov 27, 2023

Automatically bumped on Jan 20, 2024

Automatically bumped on Mar 11, 2024

Automatically bumped on May 13, 2024

Automatically bumped on Jul 14, 2024

Automatically bumped on Sep 15, 2024

[Support Guide] “Build completed successfully, but the

following processes were still running” - how to remove

building

support-guide

ehmicky Staff Product Engineer

Apr 2021

Last reviewed by Netlify Support - May 2024

This post explains the reason why you might see the following warning message in your build logs.

Why this warning message occurs

Netlify builds don’t end until the build command has completed. However, the build command might
execute other processes in the background. If the build command completes before those background
processes, Netlify terminates the processes to prevent the build from hanging.

This is usually not a problem. However, there are some cases where this termination might be unsafe
since it might interrupt some logic.

How to remove the warning message

To ﬁx this, you should make sure the build command waits for its background processes before
completing. In JavaScript, this often means properly following and calling promises, async / await , and
callbacks.

Sometimes, the problem isn’t coming from the build command itself but from a dependency used by the
build command or from a Build Plugin. In that case, you should post an issue on the dependency’s or
plugin’s repository.

If you have questions or comments, please ask below.

Running `netlify dev` in postBuild causes lingering processes warning

[Support Guide] Compiled Build and Deploy Resources -- start here!

Automatically bumped on Jul 17, 2022

Skip to main content

Automatically bumped on Sep 17, 2022

Automatically bumped on Nov 22, 2022

Automatically bumped on Jan 30, 2023

Automatically bumped on Apr 8, 2023

Automatically bumped on Jun 16, 2023

Automatically bumped on Aug 22, 2023

Automatically bumped on Oct 25, 2023

Automatically bumped on Dec 24, 2023

Automatically bumped on Feb 16, 2024

Automatically bumped on Apr 18, 2024

Automatically bumped on Jun 19, 2024

Automatically bumped on Aug 21, 2024

Archived on Aug 22, 2024

Unlisted on Aug 22, 2024

closed on Aug 22, 2024. Create a new topic for help! :)

Related topics

Topic

Running `netlify dev` in postBuild causes lingering processes

warning
netlify-cli

Skip to main content

Replies

Views

Activity

3

1.5k

Apr 2021

Topic

Replies

Views

Activity

Builds shows Completed but Deploy is still Processing

deployment

netlify-newbie

21

3.0k

May 2022

Deployments Showing Still in Progress when Building is Done
deployment

12

421

Jan 2024

The build does not ﬁnish

building

Build failed - lingering processes

deployment

4

2

313

Oct 2023

1.3k

Jul 2020

[Support Guide] Hung or stuck, but seemingly successful

build

building

support-guide

laura

Senior Manager, Support Engineering

Feb 2019

Last reviewed: October 2024

When a deploy gets stuck with no apparent build failure, it typically means that while our robots did start

building your code, it didn’t wrap up some process within the 15 minute time limit our build environment
requires. Why can this happen? More on that in a sec, but ﬁrst I want to mention that our build
environment requires all processes, not just the main ones started by your build to complete. If even one
thing gets stuck, the process won’t terminate and we end up with a stuck build. Is it possible you are
running into a situation such as the ones documented in these bug reports?

gatsby build leaves dangling jest-worker child · Issue #7527 · gatsbyjs/gatsby · GitHub
[Question] Timeout on Netlify build pipeline possibly caused by regression? · Issue #9465 ·
gatsbyjs/gatsby · GitHub

Even if the main gatsby build process exits with the right exit code (yay!), there could be some
background process that, perhaps unbeknownst to you, got started but that has not yet exited.

You’ll need to locate the process that is holding things up, and disable it for future builds to succeed, as it
probably will not stop on its own. The offending process could even be something like a “watch” command
that checks for ﬁle changes or similar, which are useful in development environments but not needed
when building for production.

If you don’t already know what the process is, it can be a bit tricky to ﬁnd it, but it is speciﬁc to your code.
You might try appending && ps auxw ; false to your build command to see if you can get a listing of
what’s there so you can make sure your build doesn’t start it, or make sure that process exits.

If that didn’t help - don’t worry, I bet we can sleuth it out with you. Leave a comment below and we’ll be

happy to give it a shot. If you are experiencing this issue, it is likely other people are as well!

Deploy fails: "Build exceeded maximum allowed runtime" - with GatsbyJS & Git Push

"netlify deploy" hangs

Build just hangs with no messages

Deployment: "DONE Build complete", But does not deploy site and times out

My Netlify build hangs after processing

20 more
Skip to main content

philhawksworth Developer Experience Engineer

Mar 2019

Somewhat related to this, @bret posted a useful article on the blog a while ago about some tooling
added to the build bots to help identify processes which might be hanging.

Fearless deploys for your lingering processes

We introduced a small feature to our build-image: a lingering process monitor

Build timeout after 10 minutes

fool

Mar 2019

I don’t think that functionality works anymore, @philhawksworth . you can see a build that should have
had that happen here: Netlify App.

That article should be removed since the functionality didn’t work reliably and was removed, and it

probably isn’t useful to reference it in here

Related topics

Topic

Build just hangs with no messages
deployment

building

Site build has started timing out with no changes

building

GatsbyJS - Build stuck after “done building”

building

Build failed - lingering processes

deployment

Deploy is stuck from CLI / web

deployment

Replies

Views

Activity

15

3.0k

May 2021

6

1

2

3

2.6k

Aug 2019

114

Jan 2024

1.3k

Jul 2020

1.6k

Feb 2020

[Support Guide] My drag and drop deploy is stuck in

“Uploading” status

deployment

support-guide

laura

Senior Manager, Support Engineering

Feb 2019

Last Reviewed by Netlify Support Staff: October 2024

Drag and drop, or "manual”, deploys are an easy way to get a simple website up and running super quick.

One thing to know about manual deploys is (fun fact!) they do not generate deploy logs. This is because
manual deploys don’t actually build anything, so there is nothing to log.

The upside to this is that they deploy lightening fast; the downside is that, without deploy logs, we can’t

tell what is happening when things go wrong or get “stuck”. When deploys get stuck, the deploy status will
remain at “In progress” or “Uploading” usually for more than 10 minutes.

Luckily, we have some tips for reliable manual deploys:

Deploys under 50MB work best. Individual ﬁles over 10MB are likely to cause your deploy to get
stuck. For anything larger, try using Netlify’s Command Line Interface.
You must have an index.html in the root of your project.
Put all of your project assets in a folder (so, myfolder/index.html and

myfolder/subdirectory/otherassets, etc).
Use a computer with a reliable network connection. Any network hiccups can cause the deploy to
get stuck.
Use the latest version of a Chromium-based browser.
Use a computer that has sufﬁcient free memory - 4x your uncompressed site size is a good
ballpark and more is better.

If your deploy ﬁts those criteria and is stuck after 10 minutes, you can try to deploy again right away by
dragging and dropping your folder again. After 10 minutes, that older, stuck deploy will never publish, so
you don’t need to worry about it interfering with your next try. If your deploy won’t get unstuck, you should
try switching to Git-backed deploys or to the Command Line Interface as mentioned above. If that still
doesn’t help, please comment below.

Deployment hangs on uploading for hours

Cannot upload a folder-as-a-site

How can I update code that's been uploaded via Netlify Drop without using GitHub

Deploying error

Deploying a Gatsby Site Hangs Forever

Skip to main content
32 more

htiwari702

I have tried all these above mentioned method . but none of the above worked …

Please help me ….

fool

As suggested, please try using the CLI:

Apr 2019

Apr 2019

Get started with Netlify CLI

Install our CLI (command line interface) and use it to run a local development
environment, deploy your site, manage environment variables, and more.

If your network isn’t “capable” enough to send fast and reliably and/or your site is too big, there is no
perfect way to upload all sites via drag and drop, but the CLI should work in all cases that we intend to
support (e.g. uploading a 6GB ﬁle will never work, unless you are using our large media feature)

Related topics

Topic

My Manual Deploy is hanging at “Creating deploy upload

records” for over 60 mins

deployment

building

Manual deploys are stuck in “Uploading” with no logs

deployment

Deployment hangs on uploading for hours

deployment

building

Drag and drop Deployment Issue

deployment

Skip to main content

Replies

Views

Activity

1

6

3

1

1.6k

Mar 2022

1.2k

Jun 2022

2.6k

Nov 2019

794

Jun 2022

Topic

Replies

Views

Activity

Stuck on Deploy in progress
deployment

building

13

3.5k

Jul 2022

[Support Guide] How long should Netlify builds take?

building

support-guide

luke

Support Engineer

Last updated by Netlify Support in October 2024

Mar 2019

The only universal answer to this is: it varies.
explain which factors affect the lengths of builds on Netlify

More detail would probably be helpful, right? Below we

One key factor is the site itself. Larger sites will take longer to build than smaller ones, and things like

images and video can impact this (if those assets need to be downloaded or processed during build).

Another factor is the static site generator (SSG) being used (if any). The performance of SSGs varies
widely. If the site takes a long time to build locally, that will also carry over to Netlify.

Also, the systems which handle the site builds are a shared resource (amongst Netlify users). When the
network is under heavy load, newly scheduled builds will be queued instead of beginning immediately.
When the load is high on the build system, and when utilizing our our Starter or Pro team plans, it is
normal for builds to queue for up to ﬁfteen (15) minutes.

Also when the load is high, it is possible that your build will be competing for scarce CPU/memory
resources. Your build is guaranteed only 4 CPUs and 8 GiB memory. This is could be less than your local
systems, so times will not likely match your local unless you use a very efﬁcient SSG like hugo.

Finally, what happens in the situation where many git push actions occur in a short time window while
there is queuing in the build network? (And it’s a good question!)

Answer: each push will trigger a deploy with Netlify but only the ﬁrst and last actually build & deploy.

Here is a more detailed explanation. Let’s imagine you run a git push ﬁve times in a few minutes. Let’s
also pretend your build takes 10 minutes to complete, so the last 4 deploys are queued.

So, what happens? Well, all ﬁve pushes will create deploys in your deploy listings page in the Netlify
admin UI, and all will show as ‘building’ in the UI. But when the ﬁrst deploy completes, the intermediate
builds will all change to the status ‘skipped’ and then Netlify will build the last (most recent) deploy. We
don’t waste our time or yours publishing builds that will be overwritten immediately.

Three more considerations around time to deploy, rather than just build:

1. once built, we must UPLOAD any changed ﬁles! The more you change, the longer it takes to

upload. This article talks in detail about reducing the number of unintentional changes in
your builds

2. This article runs through all the potential optimizations you could make around what you build,

Skip to main content

when you build, and how you build it.

Regardless, if you notice unusually long queuing times for builds, something might be wrong! Please let
us know in the comments below.

React build is so slow that netlify killed the deployment

Deployment of react app gets stuck because of lingering process

[Performance] Boosting server performance?

Build times increased 10x - Warning Query takes too long

100 or 1000 free MBs per month

20 more

zltnvrs Netlify Pilot

Apr 2019

@luke Thanks for shedding some light on how the builds are working.I’ve seeing many users
complaining about this. This is a real problem.
One common question i’m seeing in netlify/community - Gitter is about System resources: How many
RAM and CPU is available during build?
To be honest i taught build times are set to 30 mins before, because we were seeing timeouts after 30
mins, it could be just an illusion.
One solution might to have a more ﬁner grained pricing solution between the starter and the pro where we
can buy build time resources. The Pro tier is really about Team collaboration which makes sense,
enabling 3 concurrent builds makes sense, but does the build resources are bigger in the PRO tier?

Pricing And Plans

luke

Support Engineer

Apr 2019

Hi, @zltnvrs . There is additional time allowed for post-processing and uploads. This is likely the reason
for timeouts happening in 30 minutes instead of 15.

For additional build resources (for example, longer build times) a Business tier plan is required. <- Edited
on 2020-10-27 as this has changed and hasn’t been true for some time.

Regarding the RAM and CPU available in the build image, I am hoping someone else here at Netlify can
answer that question.

Build fails on netlify

fool

Apr 2019

You should count on your builds having only 15 minutes to complete their build command. The additional
Skip to main content
time for processing and uploading will be added to that and do not need to complete within that initial 15

minutes, and in some cases for very large sites or if our system is busy, they may stretch out to minutes
or even an hour (the latter only for tens of thousands of new ﬁles in a deploy).

Around unexpected timeouts, I’d suggest some reading here: [Support Guide] Hung or stuck, but
seemingly successful build . There are builds that legitimately run for more than 15 minutes, but most
cases are something like that: “oops, I started a server” or “my framework left some processes running
that made Netlify think the build wasn’t done yet”.

Regarding build resources, what you are guaranteed on our free and Pro plans is identical: approximately
1 CPU and around 2Gb of memory. You may get more - these containers run on machines that could hold
5 other simultaneous builds…or 0 others. The available memory also has to cover the linux instance that
runs within the build environment.

Business-level customers can scale to just about any size and length build; we have some running 24Gb
builds with a 3 hour timeout (these builds tend to do things like scrape data from several sources and
build every page from scratch on sites with >10,000 ﬁles).

@zltnvrs , Your suggestion about pricing was not missed and I’ve additionally mentioned it to our sales
and marketing teams that set our pricing. They love hearing feedback like that as they make decisions
about our future offerings, so please keep it coming!

Build just hangs with no messages

Build fails on netlify

Deploy timeout with "timed out while waiting to enter states"

fgm

Apr 2020

This thread still does not give at least an upper limit. I’m just trying Netlify and my ﬁrst build for a small site
(Hugo, < 100 pages) says “Deploy in progress”, and has been saying that for over 24 hours, while the
deploy log just says “10:36:05 AM: There is no log for this deploy”, which I feel is probably not normal,
even for the free plan.

Any conﬁrmation about that duration ?

luke

Support Engineer

Apr 2020

Hi, @fgm , and welcome to the Netlify community site.

This topic is about sites which are using our continuous deployment process with git backed deploys:

Create deploys

Discover different methods of deploying a site using our platform. Take
advantage of continuous deployment, manual deployment, or integration

Skip to main content

options.

The message you are seeing (“There is no log for this deploy”) is a message which is displayed when

using manual deploys.

Manual deploys don’t have a build time limit because there is no build step with a manual deploy.

The time it will take for a manual deploy to complete is affected mostly by two factors: the total size of the
ﬁles and the total number of ﬁles being deployed.

What are those two values (total size and total number of ﬁles) for the site being deployed? Also, are you
using drag and drop or the Netlify CLI to deploy?

If the deploy is taking over 24 hours it is unlikely to succeed. Regardless of the answers above, it will
almost certainly be best to cancel this deploy and try again.

Automatically bumped on Dec 14, 2021

Automatically bumped on Feb 7, 2022

Automatically bumped on Apr 4, 2022

Automatically bumped on Jun 4, 2022

Automatically bumped on Aug 6, 2022

Automatically bumped on Oct 7, 2022

Automatically bumped on Dec 13, 2022

Automatically bumped on Feb 19, 2023

Automatically bumped on Apr 27, 2023

Automatically bumped on Jul 3, 2023

Automatically bumped on Sep 8, 2023

Automatically bumped on Nov 11, 2023

Skip to main content
Automatically bumped on Jan 7, 2024

Automatically bumped on Mar 1, 2024

[Support Guide] How can I optimize my Netlify build time?

building

support-guide

fool

AskNetlify’s Version

Oct 2019

How can I avoid generating a deploy preview?

How can I skip a build when updating my repo with my git provider?

Copy either prompt above and paste it into AskNetlify, and it’ll break down this info. You can also
ask clarifying questions. Still need help? No problem! We’re happy to clarify.

Last reviewed by Netlify Support - October 2024

If you are interested in learning more about how our bots approach building sites, these three articles are
a great place to start:

How our Build Bots build sites

A major upgrade to our build environment

and perhaps least-loved but most useful, how to debug your builds

So you might think, it’s great that Netlify builds every commit from my repos…but isn’t that a bit wasteful?
The answer is, it depends, but we can at least give you some best practices for limiting waste. Maybe

you’ll save a tree this month!

This article is in 3 parts: Optimizing what you build, Optimizing how you build, and Optimizing your site
changes. Each offers opportunities to reduce build times or eliminate unnecessary builds.

Optimizing what you build

Netlify will happily build as many branches from your repository as you like - including known-broken
branches, or branches that you don’t intend to browse or care if we build. So, our #1 recommendation to
cut down on Build Minutes used is to check your conﬁguration:

1. Want to stop builds entirely, starting now? We’ve implemented a Stop Builds feature which anyone
   on your team with access to a site can conﬁgure and deconﬁgure with a press of a button. More
   details and followup questions in this support forum thread.

Skip to main content

2. In the Build & Deploy settings for each site, you’ll see a card titled Branches and deploy
   contexts. In it you can choose which branches we build, and whether we build PR’s, or just
   commits. Consider switching off deploy previews for some branches if you do not follow a one-

branch-per-feature model. There’s no wrong way to build branches but we do suggest you consider
the settings.

3. You can tell us to skip any build by including the characters [skip ci] or [skip netlify] in

your commit message.

4. If you run local tests, complete your testing before committing. No need for us to rediscover what

your unit tests or Jenkins server already knows and waste some CPU while doing it!

5. If you know exactly when you want to build and are willing to trigger it yourself through our UI or via

an incoming webhook, our Support team can enable a ﬂag for your site(s) to skip all automatic
builds from git, and use only the ones from your own custom webhooks which will still pull your code
from git and perform a normal build.

6. If you deploy manually using the CLI and have no intention of having us build, you can unlink your
   repository and turn off continuous deployment via Build & deploy → Continuous deployment →
   Repository → Manage repository.

7. Be careful with your webhook conﬁguration. Some folks have Contentful set up to save with

every keystroke, and trigger a build too. Don’t do that
triggered via incoming webhook from services like your CMS or CI by conﬁguring their auto-save or
auto-commit features appropriately.

Try to prevent unnecessary builds

8. Don’t want the robot to build? Dependabot loves to identify and PR security solutions, but you

may not want to waste your build minutes on those. You don’t have to! See this response later in
this topic for a recipe to avoid builds by dependabot (and easily adaptable to other “common”

tools). This blog post gives a more thorough write up of how to use this feature.

Optimizing how you build

There are as many tips and tricks for this as there are ways of building Netlify sites, but here are a few:

1. Let us cache your dependencies. We automatically try to cache your gems and npm/yarn

modules. We generally don’t reinstall them all unless you use the “clear build cache” checkbox in
our UI when triggering a build. Note that any change to your package.json or yarn.lock or
Gemfile.lock will result in us re-running the installation during next build, but it should still take
advantage of the cache to some degree.

2. Watch your dependencies. There are some packages that take a long time to install - cypress is a

good example. If you don’t need some dependencies on Netlify, consider setting your NODE_ENV
environment variable to production and making them devDependencies .

3. Not all build tools are created equal. Hugo is faster than most other build tools, for example. This
   isn’t to say you should port your site to a different static site generator, but if you are planning a
   large site and have not yet chosen a generator, consider build time as a factor.

4. Conﬁgure your tools appropriately. Some SSGs use plugins that use a lot of memory and run
   slowly - they can even cause builds to fail with a timeout. This article, for example, has more
   details on some best practices for Gatsby + Netlify.

Optimizing your site changes

No matter how fast your build goes, we still have to store your ﬁles after build. If your build process
changes many ﬁles with every deploy, every one of those ﬁles must be stored. If it instead changes only a
Skip to main content
single ﬁle, there is only one ﬁle to save, and one is always faster to save than many.

Look to optimize your build process so that it doesn’t change many unrelated ﬁles (or ﬁlenames) with
each build. Changing fewer ﬁles with each build also allows your repeat visitors to browse your site faster,
since they can leverage browser caching.

This article talks about the situation in depth, with some suggestions around how to avoid it.

Do you have other tips and tricks about how you’ve sped up your build? Share them with us below!

Build Minutes question - when will get charged if i use more than 300?

Execution timed out after 15m0s, need advice to deploy my site

Pricing And Plans

How To Auto Cancel Previous Deploy?

Post processing and deployment taking a long time

79 more

Pinned on Oct 2, 2019

perry

Oct 2019

I would also point out this old thread that I just found - this person accidentally had multiple webhooks, so
multiple builds were ﬁred for no reason:

Multiple builds triggered for each commit or push?

Each time I commit I see two builds for the same commit at the exact same time. Is it normal ? I am

using the victor hugo boilerplate (GitHub - netlify-templates/victor-hugo: Victor Hugo is a Hugo
boilerplate for creating truly epic websites!) Is it because I have a package.json and Hugo
conﬁg.toml in the same repo ? [28]

Making sure you don’t have redundant webhooks is something to pay attention to if you are trying to

reduce build minutes used.

Skillz

Oct 2019

Is it possible to view this data in a similar way to how we view Netlify Analytics. If we could see how much
minutes are being used per day in a 1 month period it would be really helpful.

Yesterday, I made some changes to my project decreasing build times from 10 minutes down to 4
minutes. I also modiﬁed some settings on netlify like disabling pull request deploy previews and such.
Nonetheless, it will be really hard to understand how all these changes impact my build times if all I can
see is a number for the entire month.

Skip to main content
The data I was referring to:

If we had a chart i could tell after a week hey my total build times have decreased a lot or I still need to
make more changes. I could tell if my build times decreased enough to re-enable a feature like deploy
previews. One number for the total of a month isn’t enough in my opinion.

One of the best thing has been how this encourages us to create better projects by improving our build
times. However, it’s really hard to determine how effective that change is over a period of time.

Something more granular should be coming soon and we’ll announce it in this

Oct 2019

Oct 2019

fool

We’re working on it
thread.

Skillz

fool:

You can tell us to skip any build by including the characters [skip ci] in your commit message.

Is it possible to enhance this a little bit please? This is a really good feature but I wish we could have a
setting in the Dashboard where we could add our own keywords. In my opinion, this is going to be a
massive impact on build times for projects like mine.

1. Dependabot
   The bot makes quite a few PR into a project. If you have deploy previews enabled, your build times are
   going to be getting destroyed. Even when you have it disabled, merging these PRs can cause about 2-4
   builds to be run. This certainly needs to be enhanced.

Today I had about 12 PR from the bot. I merged as many as i could as fast as I could until some of them
had conﬂicts preventing merging. While waiting to have the bot resolve these conﬂicts netlify builds
completed 1 build and skipped a few and began building the latest one. Once dependabot ﬁxed the

conﬂicts I merged them as well and once again netlify created a third build.

Skip to main content

All this happened while I was rushing to merge them. Normally, I would just come back later and merge

any remaining PRs. This is going to be causing anywhere between 2-4 builds for normal users.
Something else that I have not yet considered is what happens when you have more than 1 build
capacity. If i were to have 3 build capacity this might become a nightmare haha.

2. Netlify CMS
   My project also incorporates netlify CMS and maintainers can write guides on the project. This includes
   uploading images and creating guides. The issue is that uploading a single image can trigger an entire
   build as well. This becomes really problematic even if you have not merged that PR because netlify CMS
   edits the repo directly with uploaded images.

If it was possible to somehow control what keywords to look for in the settings we could limit a lot of these
builds from being triggered.

fool

Oct 2019

Great suggestion, but I don’t think we have immediate plans to implement it in the near term for the
general use case of commits where you specify the commit message, which I understand is NOT your
use case. I wonder if @erquhart could speak to the ability to customize the CMS commit message that
the CMS uses?

I have nonetheless ﬁled a feature request for it, and linked this thread to it so we can respond here in
case we do.

Skip to main content
erquhart

Oct 2019

One of our maintainers just opened an issue for this on the Netlify CMS repo, very doable.

Skip CI when uploading / removing an image

opened

Oct 7, 2019 closed

Oct 24, 2019

tomrutgers

<!--
Please make sure that we do not have any requests for this feature already …

How to build projects in Monorepository that use shared components

marcus Product Engineer

Oct 2019

Can you check if the  ignore  setting in  netlify.toml  might work for you?

File-based conﬁguration

Use a netlify.toml conﬁguration ﬁle to specify how the platform builds and
deploys your project.

You could try something like this:  git log -1 --pretty=%B | grep dependabot .
Git log has all kinds of info about a commit, so you could also check who committed.

Conﬁgure Netlify to ignore builds for Dependabot PRs

How to use Netlify only for Pull Request previews

Disable auto building when creating and editing MRs

Commit_ref is null if the deploy was via a build hook

tomrutgers Netlify Pilot

Oct 2019

Turns out custom commit messages are already available as a beta feature:

backend:
  commit_messages:
    create: 'Create {{collection}} “{{slug}}”'
    update: 'Update {{collection}} “{{slug}}”'
    delete: 'Delete {{collection}} “{{slug}}”'
    uploadMedia: '[skip ci] Upload “{{path}}”'
    deleteMedia: '[skip ci] Delete “{{path}}”'

Skip to main content
LGenzelis

Dec 2019

I had started a separate thread for this issue, but I guess this would be a more appropriate place for it.

If I’m not getting something wrong, netlify is making many unnecessary builds, at least for my project.
Please take a look a this screenshot of my builds dashboard:

There are three different builds for the same commit (note the highlighted commit messages).

The ﬁrst one refers to the actual commit, but the two following ones correspond to changes in the gitlab
MR (such as changing the MR’s description or removing its WIP status). How can I avoid this?

luke

Support Engineer

Dec 2019

@LGenzelis , I followed up in the there topic with an answer here.

To summarize, the webhook for MRs will be “triggered when a merge request is created/updated/merged”.
There isn’t an option for just “merged” and this setting is at GitLab, not Netlify, so we cannot change this
behavior. It might be helpful to ﬁle a feature request at GitLab asking for more ﬁne grained control of the
webhooks there.

thedamon

Dec 2019

I would love an option to opt-in to branch builds instead of opting out. (IE a [build] in a commit comment).

We ﬁnd the branch deploys extremely useful for sharing progress and getting sign off from other teams
before code is merged, but many branches there’s no need to deploy, and many commits also don’t need
to be built. having a way that we can easily and from the command line let devs deploy to  branchname--
us.netlify.com  would work really well to limit unnecessary use of build minutes.

Is anything like that possible out of the box?

luke

Support Engineer

Dec 2019

Hi,  @thedamon . We want to make certain we understand the use cases and requirements for the new
feature request before we ﬁle it.

When you say “from the command line” is this a reference to Netlify’s CLI tool or a Git commit/push?
Skip to main content

Regarding only building speciﬁc branches, that can be conﬁgured already on a per-site basis. The options
are:

build only the production branch
build all branches
build production and selected branches only

Do those options meet the “many branches there’s no need to deploy” requirement? If not, what behavior
would better meet the requirement?

Regarding the opt-in (as opposed to the current opt-out), how would you see that working? Would there
be an “opt-in only” option/checkbox in the site settings which prevents builds unless “ [build] ” (or some
other string) is included in the commit message? Should the opt-in string be user conﬁgurable?

Please feel free to include any additional details which help to clarify the request and we look forward to
your reply.

thedamon

Dec 2019

hey  @luke  thanks so much for being in touch.

“build production and selected branches only” is close, but selecting which branches becomes the pain
point. In order to conserve minutes we want to avoid as many deploys as we can… but we wouldn’t want
to need to go into the netlify admin to set it up.

Generally, the perfect ﬂow would be to have a command line option to choose to also trigger a netlify
branch deploy (to  branchname--me.netlify.com  whenever pushing new commits (mainly to reduce
the overhead in using this feature).

Under the covers this could be something like using an API to turn on branch deploys for a branch, push,
and then turn off branch deploys for the branch immediately after the push. It’s possible that something
like that already exists in the CLI tool… I haven’t checked that out yet!

[build ci]  (just to follow the  skip-ci  pattern) as a potential ﬂag in a commit message would be
awesome to be able to use ( maybe not necessary given the stuff above )… I’m always happy to be able
to conﬁgure stuff, but I don’t think it’s a big deal here.

Dennis

Dec 2019

Alternatively, you could set up a build hook for a speciﬁc branch and then trigger that hook whenever you
need to. You could probably automate when to do so using GitHub Actions or something similar.

Would that work for you?

nicolasrouanne
Skip to main content
Trying to skip all dependabot PRs I user  @marcus ’ suggestion

Dec 2019

[build]
  # ignore all PRs opened by `dependabot` (with last commit made by `dependabot`)
  ignore = 'git log -1 --pretty=%B | grep dependabot'

Netlify is triggering the  ignore  ﬂag correctly, on a commit hash which should result in a match (and a 0
return code), however it still runs the build. Is there something I’m missing?

12:33:25 AM: Found Netlify configuration file. Overriding site configuration
12:33:25 AM: Detected ignore command in Netlify configuration file. Proceeding wi
12:33:25 AM: Starting build script

EDIT: I relinked the Github repository as speciﬁed in  netlify.toml  documentation, and now the ignore
task seems to run. However I get an error  fatal: ambiguous argument '|': unknown revision
or path not in the working tree .

11:13:37 AM: Detected ignore command in Netlify configuration file. Proceeding wi
11:13:37 AM: fatal: ambiguous argument '|': unknown revision or path not in the w
11:13:37 AM: Use '--' to separate paths from revisions, like this:
11:13:37 AM: 'git <command> [<revision>...] -- [<file>...]'
11:13:37 AM: Starting build script

fool

Dec 2019

Hmm, that’s quite odd - I just pasted that into my shell and it worked well.

Just for grins, could you try making a shell script called “ignore.sh” in the root of your  base  directory (if
any), and using as the command  sh ./ignore.sh  ? It should look like this:

#!/bin/sh

git log -1 --pretty=%B | grep dependabot

Let me know how it goes!

jwbaart

@laura  awesome, thanks!

salmonax

Skip to main content
Thanks!

Jan 2020

Feb 2020

Hmm, we started getting intermittent Bad Gateway 502 errors on the same date that you made the
change. It happens during the CDN difﬁng step:

CDN difﬁng ﬁles…
› Warning: TextHTTPError: 502
› Warning:
› TextHTTPError: Bad Gateway
›
TextHTTPError: Bad Gateway
at NetlifyAPI.createSiteDeploy (/app/landing/node_modules/netlify/src/open-api/index.js:173:13)
at async module.exports (/app/landing/node_modules/netlify/src/deploy/index.js:77:16)

at async NetlifyAPI.deploy (/app/landing/node_modules/netlify/src/index.js:108:12)
at async DeployCommand.run (/app/landing/node_modules/netlify-
cli/src/commands/deploy.js:158:17)
at async DeployCommand._run
(/app/landing/node_modules/@oclif/command/lib/command.js:44:20)
at async Conﬁg.runCommand (/app/landing/node_modules/@oclif/conﬁg/lib/conﬁg.js:151:9)
at async Main.run (/app/landing/node_modules/@oclif/command/lib/main.js:21:9)
at async Main._run (/app/landing/node_modules/@oclif/command/lib/command.js:44:20)

Could it be related?

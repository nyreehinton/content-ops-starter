"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[744],{1744:function(t,n,e){e.r(n);var o=e(5893);e(7294);var a=e(3065);n.default=t=>{let{className:n}=t;return(0,o.jsx)(a.Z,{children:(0,o.jsx)("script",{dangerouslySetInnerHTML:{__html:"\n        // Function to handle tab switching\n        function switchTab(tabId) {\n          console.log('Switching to tab:', tabId);\n          // Get all tab contents and buttons\n          const allContents = document.querySelectorAll('.bloomberg-tab-content');\n          const allButtons = document.querySelectorAll('.bloomberg-tab-button');\n\n          // First hide all contents and deactivate all buttons\n          allContents.forEach(content => {\n              content.style.display = 'none';\n              content.classList.remove('active');\n              content.style.opacity = '0';\n          });\n\n          allButtons.forEach(button => {\n              button.classList.remove('active');\n          });\n\n          // Show the selected content and activate the button\n          const selectedContent = document.getElementById(tabId);\n          const selectedButton = document.querySelector(`[data-tab=\"${tabId}\"]`);\n\n          if (selectedContent && selectedButton) {\n              console.log('Found tab content and button');\n              selectedContent.style.display = 'block';\n              // Force a reflow\n              selectedContent.offsetHeight;\n              selectedContent.style.opacity = '1';\n              selectedContent.classList.add('active');\n              selectedButton.classList.add('active');\n          } else {\n              console.log('Tab content or button not found');\n              // Fallback to first tab if the requested tab doesn't exist\n              const firstButton = document.querySelector('.bloomberg-tab-button');\n              if (firstButton) {\n                  const firstTabId = firstButton.getAttribute('data-tab');\n                  if (firstTabId !== tabId) {\n                      switchTab(firstTabId);\n                  }\n              }\n          }\n        }\n\n        // Function to initialize tabs\n        function initializeTabs() {\n          console.log('Initializing tabs');\n          const tabButtons = document.querySelectorAll('.bloomberg-tab-button');\n          console.log('Found tab buttons:', tabButtons.length);\n\n          // Add click event listeners to all tab buttons\n          tabButtons.forEach(button => {\n              button.addEventListener('click', function(e) {\n                  e.preventDefault();\n                  const tabId = this.getAttribute('data-tab');\n                  switchTab(tabId);\n              });\n          });\n\n          // Set initial active tab\n          const activeTab = document.querySelector('.bloomberg-tab-content.active');\n          if (!activeTab) {\n              const firstButton = tabButtons[0];\n              if (firstButton) {\n                  const firstTabId = firstButton.getAttribute('data-tab');\n                  switchTab(firstTabId);\n              }\n          }\n        }\n\n        // Initialize tabs when DOM is ready\n        function tryInitialize() {\n          if (document.readyState === 'loading') {\n              document.addEventListener('DOMContentLoaded', initializeTabs);\n          } else {\n              initializeTabs();\n          }\n        }\n\n        // Try to initialize immediately\n        tryInitialize();\n\n        // Fallback: try again after a short delay\n        setTimeout(tryInitialize, 500);\n      "}})})}},3065:function(t,n,e){e.d(n,{Z:function(){return i}});var o=e(5893),a=e(7294);function i(t){let{children:n,fallback:e=null}=t,[i,s]=(0,a.useState)(!1);return(0,a.useEffect)(()=>{s(!0)},[]),i?(0,o.jsx)(o.Fragment,{children:n}):(0,o.jsx)(o.Fragment,{children:e})}}}]);